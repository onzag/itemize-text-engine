import {
  renderTemplateDynamically
} from "/dist/commons-6NDWBSM5.js";
import {
  TemplateArgs,
  __toESM,
  deserialize,
  require_react,
  require_react_dom,
  sanitize
} from "/dist/commons-EJSJQMMI.js";

// example3.tsx
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var featureSupport = {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  // notice this being true
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
};
var TEXT_FROM_SERVER_1 = '<p>please input your name <span class="inline" data-ui-handler="inputField" data-placeholder="here">input field</span></p>';
var sanitized1 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_1);
var textTree1 = deserialize(sanitized1);
function InputUIHandler(props) {
  const [value, setValue] = (0, import_react.useState)("");
  const setValueCb = (0, import_react.useCallback)((e) => {
    setValue(e.target.value);
  }, []);
  return /* @__PURE__ */ import_react.default.createElement(
    "input",
    {
      placeholder: props.args.placeholder,
      value,
      onChange: setValueCb,
      className: props.className,
      style: props.style
    }
  );
}
var rendered1 = renderTemplateDynamically(textTree1, new TemplateArgs(
  {
    inputField: InputUIHandler
  }
));
var TEXT_FROM_SERVER_2 = '<div data-ui-handler="radioGroup"><p>invalid</p><p data-ui-handler="radioField" data-value="1">option 1</p><p data-ui-handler="radioField" data-value="2">option 2</p><p data-ui-handler="radioField" data-value="3">option 3</p></div>';
var sanitized2 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_2);
var textTree2 = deserialize(sanitized2, null, {
  useContextRulesOf: {
    label: "root",
    type: "context",
    properties: {
      radioGroup: {
        type: "ui-handler",
        label: "radio group",
        // ensure that all radio groups only contain radio fields
        allowsChildren: (c) => {
          return c.uiHandler === "radioField";
        }
      },
      radioField: {
        type: "ui-handler",
        label: "radio field",
        // ensure that all radio fields are inside a radio group
        allowsParent: (c) => {
          return c.type === "container" && c.uiHandler === "radioGroup";
        }
      }
    }
  }
});
var RadioContext = import_react.default.createContext(null);
function RadioGroupUIHandler(props) {
  const [value, onChange] = (0, import_react.useState)(null);
  return /* @__PURE__ */ import_react.default.createElement(RadioContext.Provider, { value: { value, onChange } }, /* @__PURE__ */ import_react.default.createElement("div", { style: { border: "solid 1px red" }, className: props.className }, props.children));
}
function RadioFieldUIHandler(props) {
  const contextV = (0, import_react.useContext)(RadioContext);
  return /* @__PURE__ */ import_react.default.createElement(
    "div",
    {
      style: { border: "solid 1px " + (contextV.value === props.args.value ? "green" : "#ccc") },
      onClick: contextV.onChange.bind(null, props.args.value),
      className: props.className
    },
    props.children
  );
}
var rendered2 = renderTemplateDynamically(textTree2, new TemplateArgs(
  {
    radioField: RadioFieldUIHandler,
    radioGroup: RadioGroupUIHandler
  }
));
function Example() {
  return /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement("h1", null, "Using UI Handlers"), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Basic UI Handler to have input fields"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_1), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered1)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Basic UI Handler that contains UI handlers and contains content within the handler"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_2), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered2)));
}
import_react_dom.default.render(/* @__PURE__ */ import_react.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,
