import {
  DefaultSlateWrapper,
  SlateEditor,
  defaultElementWrappers,
  defaultWrapperI18nRichInfoEnglish
} from "/dist/commons-RCMAD6YE.js";
import {
  __toESM,
  deserialize,
  require_react,
  require_react_dom,
  sanitize
} from "/dist/commons-2PRWFEI7.js";

// example4.tsx
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var featureSupportBasic = {
  supportedContainers: null,
  supportedCustoms: null,
  supportedRichClasses: null,
  supportedTables: null,
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: "*",
  supportsImages: true,
  supportsImagesAccept: "image/*",
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
};
var TEXT_FROM_SERVER_1 = "";
var sanitized1 = sanitize({
  fileResolver: null
}, featureSupportBasic, TEXT_FROM_SERVER_1);
var textTree1 = deserialize(sanitized1);
function Example() {
  const [htmlValue, setHtmlValue] = (0, import_react.useState)(sanitized1);
  const [treeValue, setTreeValue] = (0, import_react.useState)(textTree1);
  const [files, setFiles] = (0, import_react.useState)([]);
  const onInsertFile = (0, import_react.useCallback)(async (file, isExpectingImage) => {
    const fileData = {
      // you should probably use some uuid instead of this
      id: "FILE" + Math.random().toString().substring(2),
      metadata: null,
      name: file.name,
      size: file.size,
      type: file.type,
      url: URL.createObjectURL(file),
      src: file
    };
    if (isExpectingImage) {
      return await new Promise(async (resolve) => {
        const img = new Image();
        img.onload = () => {
          fileData.metadata = img.width + "x" + img.height;
          setFiles([...files, {
            file: fileData,
            isImage: true
          }]);
          resolve({
            result: fileData,
            width: img.width,
            height: img.height,
            isImage: true
          });
        };
        img.onerror = () => {
          resolve(null);
        };
        img.src = fileData.url;
      });
    }
    setFiles([...files, {
      file: fileData,
      isImage: true
    }]);
    return {
      result: fileData,
      width: null,
      height: null,
      isImage: false
    };
  }, [files]);
  const onInsertFileFromURL = (0, import_react.useCallback)(async (url, name, isExpectingImage) => {
    let blob;
    try {
      const fileData = await fetch(url);
      blob = await fileData.blob();
      blob.name = name;
    } catch (err) {
      return null;
    }
    return this.onInsertFile(blob, isExpectingImage);
  }, [onInsertFile]);
  const onRetrieveFile = (0, import_react.useCallback)((fileId) => {
    const file = files.find((f) => f.file.id === fileId) || null;
    return (file == null ? void 0 : file.file) || null;
  }, [files]);
  const onRetrieveImage = (0, import_react.useCallback)((fileId) => {
    const file = onRetrieveFile(fileId);
    if (file) {
      return {
        file,
        srcset: null
      };
    }
    return null;
  }, [onRetrieveFile]);
  return /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement("h1", null, "Basic Editing"), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "This editor has some wrappers, and element wrappers and they add all the missing functionality as well as allow to it to function correctly The content are styled with the use of `dist.css` and the file `editor.css` gives some very basic styles so that's usable but you are expected not to need to use `editor.css` and style yourself with your own solution that fits your app"), /* @__PURE__ */ import_react.default.createElement("h4", null, "The wrapper wraps the editor (gives toolbar and drawer), and the element wrappers wrap the element (gives options for a specific element, for example try inserting a title)"), /* @__PURE__ */ import_react.default.createElement("h4", null, "Basic Editor (Unstyled)"), /* @__PURE__ */ import_react.default.createElement("div", { style: { border: "solid 1px #ccc" } }, /* @__PURE__ */ import_react.default.createElement(
    SlateEditor,
    {
      id: "my-editor",
      currentLoadError: null,
      dismissCurrentLoadError: null,
      onInsertFile,
      onInsertFileFromURL,
      onRetrieveFile,
      onRetrieveImage,
      supportedImageTypes: "image/*",
      currentValid: true,
      treeValue,
      value: htmlValue,
      features: featureSupportBasic,
      isRichText: textTree1.rich,
      lang: "en",
      onChange: (value, textTreeValue) => {
        setHtmlValue(value);
        setTreeValue(textTreeValue);
      },
      rootContext: null,
      Wrapper: DefaultSlateWrapper,
      elementWrappers: defaultElementWrappers,
      baseI18n: defaultWrapperI18nRichInfoEnglish
    }
  ))), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("code", null, htmlValue), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(treeValue, null, 2))));
}
import_react_dom.default.render(/* @__PURE__ */ import_react.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,
