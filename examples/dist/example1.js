import {
  __spreadProps,
  __spreadValues,
  __toESM,
  deserialize,
  deserializePlain,
  require_react,
  require_react_dom,
  sanitize,
  serialize,
  serializeString
} from "/dist/commons.js";

// example1.tsx
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var TEXT_FROM_SERVER_1 = '<p style="position: fixed">this is some simple text</p><p class="malicious">that came from the server</p><p>and is being parsed by text engine</p><script>window.MALICIOUS = true<\/script>';
var TEXT_FROM_SERVER_2 = '<img src="https://external-server.com" /><p>invalid html</p></p>';
var TEXT_FROM_SERVER_3 = '<p>click <a href="https://external-server.com/malicious">here</a> or here <a href="./safe">here</a> </p>';
var TEXT_FROM_SERVER_4 = '<div class="container-happy"><p class="rich-text--sparkling-text">allowed custom class</p></div><div class="container-sad"><p>invalid container type</p></div><p>outside of container</p>';
var TEXT_FROM_SERVER_5 = '<a class="image"><div class="image-container"><div class="image-pad" style="padding-bottom: 56.25%"><img alt="example" data-src-height="720" data-src-id="FILEID" data-src-width="1280" loading="lazy"></div></div></a>';
var TEXT_FROM_SERVER_6 = "This is just\nSome plain text";
var sanitized1 = sanitize({
  fileResolver: null
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_1);
var sanitized2 = sanitize({
  fileResolver: null
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_2);
var sanitized3 = sanitize({
  fileResolver: null
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  // disabling external links
  supportsExternalLinks: false,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_3);
var sanitized4 = sanitize({
  fileResolver: null
}, {
  supportedContainers: ["happy"],
  supportedCustoms: [],
  supportedRichClasses: ["sparkling-text"],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  // disabling external links
  supportsExternalLinks: false,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_4);
var sanitized4_2 = sanitize({
  fileResolver: null
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  // disabling containers
  supportsContainers: false,
  supportsCustom: true,
  supportsCustomStyles: true,
  // disabling external links
  supportsExternalLinks: false,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_4);
var sanitized5 = sanitize({
  // resolving a file
  fileResolver: (id) => {
    return {
      src: "./img/example-img.jpeg"
      // no srcset specified
    };
  }
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  // disabling external links
  supportsExternalLinks: false,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_5);
var filesToAttach = [];
var cidFilesToAttach = [];
var sanitized5_2 = sanitize({
  // resolving a file
  fileResolver: (id) => {
    return {
      // this is dangerous, don't trust the file ID as it is
      // always generate own ids
      src: "cid:" + id
    };
  },
  mail: true,
  mailShouldAttachFile: (fileId) => {
    filesToAttach.push(fileId);
  },
  mailShouldAttachCidFile: (fileId) => {
    cidFilesToAttach.push(fileId);
  }
}, {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  // disabling external links
  supportsExternalLinks: false,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
}, TEXT_FROM_SERVER_5);
var textTree1 = deserialize(TEXT_FROM_SERVER_1);
var textTree1_2 = deserialize(sanitized1);
var textTree2 = deserialize(sanitized2);
var textTree3 = deserialize(sanitized3);
var textTree6 = deserializePlain(TEXT_FROM_SERVER_6);
var reSerialized6 = serialize(textTree6);
var textTree6_clone = __spreadProps(__spreadValues({}, textTree6), {
  rich: true,
  id: "MY_ID"
});
var reSerialized6_3 = serializeString(textTree6_clone);
function Example() {
  return /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement("h1", null, "Basic Parsing and Data Displaying"), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML:"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_1), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (can be used in dangerouslySetInnerHTML):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized1), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree (Unsanitized, Unsafe):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree1, null, 2)), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree (Sanitized, Safe):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree1_2, null, 2))), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML:"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_2), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (can be used in dangerouslySetInnerHTML):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized2), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree (Sanitized, Safe):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree2, null, 2))), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML:"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_3), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (external links are disabled):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized3), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree (Sanitized, Safe):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree3, null, 2))), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML:"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_4), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (container-happy and sparkling-text are allowed):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized4), /* @__PURE__ */ import_react.default.createElement("div", null, "Displayed of sanitized"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", dangerouslySetInnerHTML: { __html: sanitized4 }, style: { padding: "10px", border: "solid 1px #ccc" } }), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (containers are not allowed):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized4_2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML:"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_5), /* @__PURE__ */ import_react.default.createElement("div", null, "Sanitized HTML (during sanitization images are resolved, since the original source isn't trusted anyway):"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized5), /* @__PURE__ */ import_react.default.createElement("div", null, "Displayed of sanitized"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", dangerouslySetInnerHTML: { __html: sanitized5 }, style: { padding: "10px", border: "solid 1px #ccc" } }), /* @__PURE__ */ import_react.default.createElement("div", null, "Generated for email"), /* @__PURE__ */ import_react.default.createElement("code", null, sanitized5_2), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify({ filesToAttach, cidFilesToAttach }, null, 2))), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("div", null, "Original PLAIN TEXT:"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(TEXT_FROM_SERVER_6)), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized Plan Text Tree (The tree can be used so the rich text editor can produce/use plain text too to keep consistency):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree6, null, 2)), /* @__PURE__ */ import_react.default.createElement("div", null, "Reserialized Original:"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(reSerialized6, null, 2)), /* @__PURE__ */ import_react.default.createElement("div", null, "Reserialized Force HTML (Bad practise):"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(reSerialized6_3, null, 2))));
}
import_react_dom.default.render(/* @__PURE__ */ import_react.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vZXhhbXBsZTEudHN4Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgZGVzZXJpYWxpemUsIGRlc2VyaWFsaXplUGxhaW4sIHNlcmlhbGl6ZSwgc2VyaWFsaXplU3RyaW5nIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IHNhbml0aXplIH0gZnJvbSBcIi4uL3Nhbml0aXplclwiO1xuXG4vLyBub3RpY2UgdGhlIG1hbGljaW91cyBzY3JpcHQgYW5kIHRoZSBtYWxpY2lvdXMgY3NzIHN0eWxlIHRhZ1xuY29uc3QgVEVYVF9GUk9NX1NFUlZFUl8xID0gJzxwIHN0eWxlPVwicG9zaXRpb246IGZpeGVkXCI+dGhpcyBpcyBzb21lIHNpbXBsZSB0ZXh0PC9wPjxwIGNsYXNzPVwibWFsaWNpb3VzXCI+dGhhdCBjYW1lIGZyb20gdGhlIHNlcnZlcjwvcD48cD5hbmQgaXMgYmVpbmcgcGFyc2VkIGJ5IHRleHQgZW5naW5lPC9wPjxzY3JpcHQ+d2luZG93Lk1BTElDSU9VUyA9IHRydWU8L3NjcmlwdD4nO1xuY29uc3QgVEVYVF9GUk9NX1NFUlZFUl8yID0gJzxpbWcgc3JjPVwiaHR0cHM6Ly9leHRlcm5hbC1zZXJ2ZXIuY29tXCIgLz48cD5pbnZhbGlkIGh0bWw8L3A+PC9wPic7XG5jb25zdCBURVhUX0ZST01fU0VSVkVSXzMgPSAnPHA+Y2xpY2sgPGEgaHJlZj1cImh0dHBzOi8vZXh0ZXJuYWwtc2VydmVyLmNvbS9tYWxpY2lvdXNcIj5oZXJlPC9hPiBvciBoZXJlIDxhIGhyZWY9XCIuL3NhZmVcIj5oZXJlPC9hPiA8L3A+JztcbmNvbnN0IFRFWFRfRlJPTV9TRVJWRVJfNCA9ICc8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWhhcHB5XCI+PHAgY2xhc3M9XCJyaWNoLXRleHQtLXNwYXJrbGluZy10ZXh0XCI+YWxsb3dlZCBjdXN0b20gY2xhc3M8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImNvbnRhaW5lci1zYWRcIj48cD5pbnZhbGlkIGNvbnRhaW5lciB0eXBlPC9wPjwvZGl2PjxwPm91dHNpZGUgb2YgY29udGFpbmVyPC9wPic7XG5jb25zdCBURVhUX0ZST01fU0VSVkVSXzUgPSAnPGEgY2xhc3M9XCJpbWFnZVwiPjxkaXYgY2xhc3M9XCJpbWFnZS1jb250YWluZXJcIj48ZGl2IGNsYXNzPVwiaW1hZ2UtcGFkXCIgc3R5bGU9XCJwYWRkaW5nLWJvdHRvbTogNTYuMjUlXCI+PGltZyBhbHQ9XCJleGFtcGxlXCIgZGF0YS1zcmMtaGVpZ2h0PVwiNzIwXCIgZGF0YS1zcmMtaWQ9XCJGSUxFSURcIiBkYXRhLXNyYy13aWR0aD1cIjEyODBcIiBsb2FkaW5nPVwibGF6eVwiPjwvZGl2PjwvZGl2PjwvYT4nO1xuY29uc3QgVEVYVF9GUk9NX1NFUlZFUl82ID0gXCJUaGlzIGlzIGp1c3RcXG5Tb21lIHBsYWluIHRleHRcIjtcblxuLy8gdGhpcyBpcyBzYWZlIHRvIHVzZSBpbiBkYW5nZXJvdXNseVNldElubmVySFRNTFxuY29uc3Qgc2FuaXRpemVkMSA9IHNhbml0aXplKHtcbiAgZmlsZVJlc29sdmVyOiBudWxsLFxufSwge1xuICBzdXBwb3J0ZWRDb250YWluZXJzOiBbXSxcbiAgc3VwcG9ydGVkQ3VzdG9tczogW10sXG4gIHN1cHBvcnRlZFJpY2hDbGFzc2VzOiBbXSxcbiAgc3VwcG9ydGVkVGFibGVzOiBbXSxcbiAgc3VwcG9ydHNDb250YWluZXJzOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbTogdHJ1ZSxcbiAgc3VwcG9ydHNDdXN0b21TdHlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRXh0ZXJuYWxMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNGaWxlczogdHJ1ZSxcbiAgc3VwcG9ydHNGaWxlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNJbWFnZXM6IHRydWUsXG4gIHN1cHBvcnRzSW1hZ2VzQWNjZXB0OiBudWxsLFxuICBzdXBwb3J0c0xpbmtzOiB0cnVlLFxuICBzdXBwb3J0c0xpc3RzOiB0cnVlLFxuICBzdXBwb3J0c1F1b3RlOiB0cnVlLFxuICBzdXBwb3J0c1JpY2hDbGFzc2VzOiB0cnVlLFxuICBzdXBwb3J0c1RhYmxlczogdHJ1ZSxcbiAgc3VwcG9ydHNUZW1wbGF0aW5nOiB0cnVlLFxuICBzdXBwb3J0c1RpdGxlOiB0cnVlLFxuICBzdXBwb3J0c1ZpZGVvczogdHJ1ZSxcbn0sIFRFWFRfRlJPTV9TRVJWRVJfMSk7XG5cbmNvbnN0IHNhbml0aXplZDIgPSBzYW5pdGl6ZSh7XG4gIGZpbGVSZXNvbHZlcjogbnVsbCxcbn0sIHtcbiAgc3VwcG9ydGVkQ29udGFpbmVyczogW10sXG4gIHN1cHBvcnRlZEN1c3RvbXM6IFtdLFxuICBzdXBwb3J0ZWRSaWNoQ2xhc3NlczogW10sXG4gIHN1cHBvcnRlZFRhYmxlczogW10sXG4gIHN1cHBvcnRzQ29udGFpbmVyczogdHJ1ZSxcbiAgc3VwcG9ydHNDdXN0b206IHRydWUsXG4gIHN1cHBvcnRzQ3VzdG9tU3R5bGVzOiB0cnVlLFxuICBzdXBwb3J0c0V4dGVybmFsTGlua3M6IHRydWUsXG4gIHN1cHBvcnRzRmlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRmlsZXNBY2NlcHQ6IG51bGwsXG4gIHN1cHBvcnRzSW1hZ2VzOiB0cnVlLFxuICBzdXBwb3J0c0ltYWdlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNMaXN0czogdHJ1ZSxcbiAgc3VwcG9ydHNRdW90ZTogdHJ1ZSxcbiAgc3VwcG9ydHNSaWNoQ2xhc3NlczogdHJ1ZSxcbiAgc3VwcG9ydHNUYWJsZXM6IHRydWUsXG4gIHN1cHBvcnRzVGVtcGxhdGluZzogdHJ1ZSxcbiAgc3VwcG9ydHNUaXRsZTogdHJ1ZSxcbiAgc3VwcG9ydHNWaWRlb3M6IHRydWUsXG59LCBURVhUX0ZST01fU0VSVkVSXzIpO1xuXG5jb25zdCBzYW5pdGl6ZWQzID0gc2FuaXRpemUoe1xuICBmaWxlUmVzb2x2ZXI6IG51bGwsXG59LCB7XG4gIHN1cHBvcnRlZENvbnRhaW5lcnM6IFtdLFxuICBzdXBwb3J0ZWRDdXN0b21zOiBbXSxcbiAgc3VwcG9ydGVkUmljaENsYXNzZXM6IFtdLFxuICBzdXBwb3J0ZWRUYWJsZXM6IFtdLFxuICBzdXBwb3J0c0NvbnRhaW5lcnM6IHRydWUsXG4gIHN1cHBvcnRzQ3VzdG9tOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbVN0eWxlczogdHJ1ZSxcbiAgLy8gZGlzYWJsaW5nIGV4dGVybmFsIGxpbmtzXG4gIHN1cHBvcnRzRXh0ZXJuYWxMaW5rczogZmFsc2UsXG4gIHN1cHBvcnRzRmlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRmlsZXNBY2NlcHQ6IG51bGwsXG4gIHN1cHBvcnRzSW1hZ2VzOiB0cnVlLFxuICBzdXBwb3J0c0ltYWdlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNMaXN0czogdHJ1ZSxcbiAgc3VwcG9ydHNRdW90ZTogdHJ1ZSxcbiAgc3VwcG9ydHNSaWNoQ2xhc3NlczogdHJ1ZSxcbiAgc3VwcG9ydHNUYWJsZXM6IHRydWUsXG4gIHN1cHBvcnRzVGVtcGxhdGluZzogdHJ1ZSxcbiAgc3VwcG9ydHNUaXRsZTogdHJ1ZSxcbiAgc3VwcG9ydHNWaWRlb3M6IHRydWUsXG59LCBURVhUX0ZST01fU0VSVkVSXzMpO1xuXG5jb25zdCBzYW5pdGl6ZWQ0ID0gc2FuaXRpemUoe1xuICBmaWxlUmVzb2x2ZXI6IG51bGwsXG59LCB7XG4gIHN1cHBvcnRlZENvbnRhaW5lcnM6IFtcImhhcHB5XCJdLFxuICBzdXBwb3J0ZWRDdXN0b21zOiBbXSxcbiAgc3VwcG9ydGVkUmljaENsYXNzZXM6IFtcInNwYXJrbGluZy10ZXh0XCJdLFxuICBzdXBwb3J0ZWRUYWJsZXM6IFtdLFxuICBzdXBwb3J0c0NvbnRhaW5lcnM6IHRydWUsXG4gIHN1cHBvcnRzQ3VzdG9tOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbVN0eWxlczogdHJ1ZSxcbiAgLy8gZGlzYWJsaW5nIGV4dGVybmFsIGxpbmtzXG4gIHN1cHBvcnRzRXh0ZXJuYWxMaW5rczogZmFsc2UsXG4gIHN1cHBvcnRzRmlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRmlsZXNBY2NlcHQ6IG51bGwsXG4gIHN1cHBvcnRzSW1hZ2VzOiB0cnVlLFxuICBzdXBwb3J0c0ltYWdlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNMaXN0czogdHJ1ZSxcbiAgc3VwcG9ydHNRdW90ZTogdHJ1ZSxcbiAgc3VwcG9ydHNSaWNoQ2xhc3NlczogdHJ1ZSxcbiAgc3VwcG9ydHNUYWJsZXM6IHRydWUsXG4gIHN1cHBvcnRzVGVtcGxhdGluZzogdHJ1ZSxcbiAgc3VwcG9ydHNUaXRsZTogdHJ1ZSxcbiAgc3VwcG9ydHNWaWRlb3M6IHRydWUsXG59LCBURVhUX0ZST01fU0VSVkVSXzQpO1xuXG5jb25zdCBzYW5pdGl6ZWQ0XzIgPSBzYW5pdGl6ZSh7XG4gIGZpbGVSZXNvbHZlcjogbnVsbCxcbn0sIHtcbiAgc3VwcG9ydGVkQ29udGFpbmVyczogW10sXG4gIHN1cHBvcnRlZEN1c3RvbXM6IFtdLFxuICBzdXBwb3J0ZWRSaWNoQ2xhc3NlczogW10sXG4gIHN1cHBvcnRlZFRhYmxlczogW10sXG4gIC8vIGRpc2FibGluZyBjb250YWluZXJzXG4gIHN1cHBvcnRzQ29udGFpbmVyczogZmFsc2UsXG4gIHN1cHBvcnRzQ3VzdG9tOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbVN0eWxlczogdHJ1ZSxcbiAgLy8gZGlzYWJsaW5nIGV4dGVybmFsIGxpbmtzXG4gIHN1cHBvcnRzRXh0ZXJuYWxMaW5rczogZmFsc2UsXG4gIHN1cHBvcnRzRmlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRmlsZXNBY2NlcHQ6IG51bGwsXG4gIHN1cHBvcnRzSW1hZ2VzOiB0cnVlLFxuICBzdXBwb3J0c0ltYWdlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNMaXN0czogdHJ1ZSxcbiAgc3VwcG9ydHNRdW90ZTogdHJ1ZSxcbiAgc3VwcG9ydHNSaWNoQ2xhc3NlczogdHJ1ZSxcbiAgc3VwcG9ydHNUYWJsZXM6IHRydWUsXG4gIHN1cHBvcnRzVGVtcGxhdGluZzogdHJ1ZSxcbiAgc3VwcG9ydHNUaXRsZTogdHJ1ZSxcbiAgc3VwcG9ydHNWaWRlb3M6IHRydWUsXG59LCBURVhUX0ZST01fU0VSVkVSXzQpO1xuXG5jb25zdCBzYW5pdGl6ZWQ1ID0gc2FuaXRpemUoe1xuICAvLyByZXNvbHZpbmcgYSBmaWxlXG4gIGZpbGVSZXNvbHZlcjogKGlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyB0aGUgaWQgaXMgZ29pbmcgdG8gYmUgRklMRUlEXG4gICAgcmV0dXJuIHtcbiAgICAgIHNyYzogXCIuL2ltZy9leGFtcGxlLWltZy5qcGVnXCIsXG4gICAgICAvLyBubyBzcmNzZXQgc3BlY2lmaWVkXG4gICAgfTtcbiAgfSxcbn0sIHtcbiAgc3VwcG9ydGVkQ29udGFpbmVyczogW10sXG4gIHN1cHBvcnRlZEN1c3RvbXM6IFtdLFxuICBzdXBwb3J0ZWRSaWNoQ2xhc3NlczogW10sXG4gIHN1cHBvcnRlZFRhYmxlczogW10sXG4gIHN1cHBvcnRzQ29udGFpbmVyczogdHJ1ZSxcbiAgc3VwcG9ydHNDdXN0b206IHRydWUsXG4gIHN1cHBvcnRzQ3VzdG9tU3R5bGVzOiB0cnVlLFxuICAvLyBkaXNhYmxpbmcgZXh0ZXJuYWwgbGlua3NcbiAgc3VwcG9ydHNFeHRlcm5hbExpbmtzOiBmYWxzZSxcbiAgc3VwcG9ydHNGaWxlczogdHJ1ZSxcbiAgc3VwcG9ydHNGaWxlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNJbWFnZXM6IHRydWUsXG4gIHN1cHBvcnRzSW1hZ2VzQWNjZXB0OiBudWxsLFxuICBzdXBwb3J0c0xpbmtzOiB0cnVlLFxuICBzdXBwb3J0c0xpc3RzOiB0cnVlLFxuICBzdXBwb3J0c1F1b3RlOiB0cnVlLFxuICBzdXBwb3J0c1JpY2hDbGFzc2VzOiB0cnVlLFxuICBzdXBwb3J0c1RhYmxlczogdHJ1ZSxcbiAgc3VwcG9ydHNUZW1wbGF0aW5nOiB0cnVlLFxuICBzdXBwb3J0c1RpdGxlOiB0cnVlLFxuICBzdXBwb3J0c1ZpZGVvczogdHJ1ZSxcbn0sIFRFWFRfRlJPTV9TRVJWRVJfNSk7XG5cbmNvbnN0IGZpbGVzVG9BdHRhY2g6IHN0cmluZ1tdID0gW107XG5jb25zdCBjaWRGaWxlc1RvQXR0YWNoOiBzdHJpbmdbXSA9IFtdO1xuY29uc3Qgc2FuaXRpemVkNV8yID0gc2FuaXRpemUoe1xuICAvLyByZXNvbHZpbmcgYSBmaWxlXG4gIGZpbGVSZXNvbHZlcjogKGlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyB0aGUgaWQgaXMgZ29pbmcgdG8gYmUgRklMRUlEXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHRoaXMgaXMgZGFuZ2Vyb3VzLCBkb24ndCB0cnVzdCB0aGUgZmlsZSBJRCBhcyBpdCBpc1xuICAgICAgLy8gYWx3YXlzIGdlbmVyYXRlIG93biBpZHNcbiAgICAgIHNyYzogXCJjaWQ6XCIgKyBpZCxcbiAgICB9O1xuICB9LFxuICBtYWlsOiB0cnVlLFxuICBtYWlsU2hvdWxkQXR0YWNoRmlsZTogKGZpbGVJZCkgPT4ge1xuICAgIGZpbGVzVG9BdHRhY2gucHVzaChmaWxlSWQpO1xuICB9LFxuICBtYWlsU2hvdWxkQXR0YWNoQ2lkRmlsZTogKGZpbGVJZCkgPT4ge1xuICAgIGNpZEZpbGVzVG9BdHRhY2gucHVzaChmaWxlSWQpO1xuICB9LFxufSwge1xuICBzdXBwb3J0ZWRDb250YWluZXJzOiBbXSxcbiAgc3VwcG9ydGVkQ3VzdG9tczogW10sXG4gIHN1cHBvcnRlZFJpY2hDbGFzc2VzOiBbXSxcbiAgc3VwcG9ydGVkVGFibGVzOiBbXSxcbiAgc3VwcG9ydHNDb250YWluZXJzOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbTogdHJ1ZSxcbiAgc3VwcG9ydHNDdXN0b21TdHlsZXM6IHRydWUsXG4gIC8vIGRpc2FibGluZyBleHRlcm5hbCBsaW5rc1xuICBzdXBwb3J0c0V4dGVybmFsTGlua3M6IGZhbHNlLFxuICBzdXBwb3J0c0ZpbGVzOiB0cnVlLFxuICBzdXBwb3J0c0ZpbGVzQWNjZXB0OiBudWxsLFxuICBzdXBwb3J0c0ltYWdlczogdHJ1ZSxcbiAgc3VwcG9ydHNJbWFnZXNBY2NlcHQ6IG51bGwsXG4gIHN1cHBvcnRzTGlua3M6IHRydWUsXG4gIHN1cHBvcnRzTGlzdHM6IHRydWUsXG4gIHN1cHBvcnRzUXVvdGU6IHRydWUsXG4gIHN1cHBvcnRzUmljaENsYXNzZXM6IHRydWUsXG4gIHN1cHBvcnRzVGFibGVzOiB0cnVlLFxuICBzdXBwb3J0c1RlbXBsYXRpbmc6IHRydWUsXG4gIHN1cHBvcnRzVGl0bGU6IHRydWUsXG4gIHN1cHBvcnRzVmlkZW9zOiB0cnVlLFxufSwgVEVYVF9GUk9NX1NFUlZFUl81KTtcblxuXG4vLyB0aGlzIGlzIGFjdHVhbGx5IG5vdCBzYW5pdGl6ZWQsIGhvd2V2ZXIgdGhlIGRlc2VyaWFsaXplciBkb2Vzbid0IHVuZGVyc3RhbmQgc2NyaXB0IHZhbHVlc1xuLy8gYnV0IHlvdSBtYXkgbm90aWNlIHRoYXQgcG9zaXRpb24gZml4ZWQsIHdpbGwgZ28gdGhyb3VnaCB3aXRob3V0IHByb2JsZW0gdGhpcyB3YXlcbmNvbnN0IHRleHRUcmVlMSA9IGRlc2VyaWFsaXplKFRFWFRfRlJPTV9TRVJWRVJfMSk7XG4vLyB0aGlzIGlzIHNhZmVyXG5jb25zdCB0ZXh0VHJlZTFfMiA9IGRlc2VyaWFsaXplKHNhbml0aXplZDEpO1xuXG4vLyBkb2luZyBpdCB0aGUgc2FmZXIgd2F5IGZyb20gbm93IG9uXG5jb25zdCB0ZXh0VHJlZTIgPSBkZXNlcmlhbGl6ZShzYW5pdGl6ZWQyKTtcblxuY29uc3QgdGV4dFRyZWUzID0gZGVzZXJpYWxpemUoc2FuaXRpemVkMyk7XG5cbi8vIGJlY2F1c2UgdGhpcyBpcyBqdXN0IHBsYWluIHRleHQgaXMgYWN0dWFsbHkgc2FmZSB0byB1c2VcbmNvbnN0IHRleHRUcmVlNiA9IGRlc2VyaWFsaXplUGxhaW4oVEVYVF9GUk9NX1NFUlZFUl82KTtcblxuLy8gdGhpcyBpcyByZXNlcmlhbGl6ZWQgYXMgc3RyaW5nIGJlY2F1c2UgaXQgaXMgdGV4dCBwbGFpblxuLy8gaWYgdGhlIG9yaWdpbmFsIHNvdXJjZSB3YXMgaHRtbCBpdCB3b3VsZCBwcm9kdWNlIGh0bWxFbGVtZW50IGxpc3Rcbi8vIHRoZSBzZXJpYWxpemVTdHJpbmcgaXMgdGhlIHByZWZlcnJlZCBtZXRob2RcbmNvbnN0IHJlU2VyaWFsaXplZDYgPSBzZXJpYWxpemUodGV4dFRyZWU2KTtcblxuLy8gZm9yY2UgaXQgcmVuZGVyIGFzIHJpY2ggdGV4dCwgd2lsbCBhY3R1YWxseSBwcm9kdWNlIEhUTUxFbGVtZW50IGFycmF5XG4vLyBob3dldmVyIGR1ZSB0byBjYWNoaW5nLCB3ZSBuZWVkIGFjdHVhbGx5IGEgbmV3IG9iamVjdCB3aXRoIGEgbmV3IElEXG4vLyBiZXR0ZXIgdG8gdXNlIGEgdXVpZCB0byBrZWVwIHRoaW5ncyBzYWZlIGJ1dCBpbiBwcmFjdGlzZSB5b3Ugc2hvdWxkbid0IGJlIGZvcmNpbmdcbi8vIHRoZXNlIHNlcmlhbGl6YXRpb25zIGxpa2UgdGhpcywgdGhpcyBpcyBmb3IgZGVtb25zdHJhdGlvbiBvbmx5XG5jb25zdCB0ZXh0VHJlZTZfY2xvbmUgPSB7XG4gIC4uLnRleHRUcmVlNixcbiAgcmljaDogdHJ1ZSxcbiAgaWQ6IFwiTVlfSURcIixcbn07XG5jb25zdCByZVNlcmlhbGl6ZWQ2XzMgPSBzZXJpYWxpemVTdHJpbmcodGV4dFRyZWU2X2Nsb25lKTtcblxuXG5mdW5jdGlvbiBFeGFtcGxlKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+QmFzaWMgUGFyc2luZyBhbmQgRGF0YSBEaXNwbGF5aW5nPC9oMT5cblxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgT3JpZ2luYWwgSFRNTDpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntURVhUX0ZST01fU0VSVkVSXzF9PC9jb2RlPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIFNhbml0aXplZCBIVE1MIChjYW4gYmUgdXNlZCBpbiBkYW5nZXJvdXNseVNldElubmVySFRNTCk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57c2FuaXRpemVkMX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRGVzZXJpYWxpemVkIEhUTUwgVHJlZSAoVW5zYW5pdGl6ZWQsIFVuc2FmZSk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkodGV4dFRyZWUxLCBudWxsLCAyKX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRGVzZXJpYWxpemVkIEhUTUwgVHJlZSAoU2FuaXRpemVkLCBTYWZlKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntKU09OLnN0cmluZ2lmeSh0ZXh0VHJlZTFfMiwgbnVsbCwgMil9PC9jb2RlPlxuICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBPcmlnaW5hbCBIVE1MOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e1RFWFRfRlJPTV9TRVJWRVJfMn08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgU2FuaXRpemVkIEhUTUwgKGNhbiBiZSB1c2VkIGluIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntzYW5pdGl6ZWQyfTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBEZXNlcmlhbGl6ZWQgSFRNTCBUcmVlIChTYW5pdGl6ZWQsIFNhZmUpOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e0pTT04uc3RyaW5naWZ5KHRleHRUcmVlMiwgbnVsbCwgMil9PC9jb2RlPlxuICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBPcmlnaW5hbCBIVE1MOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e1RFWFRfRlJPTV9TRVJWRVJfM308L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgU2FuaXRpemVkIEhUTUwgKGV4dGVybmFsIGxpbmtzIGFyZSBkaXNhYmxlZCk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57c2FuaXRpemVkM308L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRGVzZXJpYWxpemVkIEhUTUwgVHJlZSAoU2FuaXRpemVkLCBTYWZlKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntKU09OLnN0cmluZ2lmeSh0ZXh0VHJlZTMsIG51bGwsIDIpfTwvY29kZT5cbiAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgT3JpZ2luYWwgSFRNTDpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntURVhUX0ZST01fU0VSVkVSXzR9PC9jb2RlPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIFNhbml0aXplZCBIVE1MIChjb250YWluZXItaGFwcHkgYW5kIHNwYXJrbGluZy10ZXh0IGFyZSBhbGxvd2VkKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntzYW5pdGl6ZWQ0fTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBEaXNwbGF5ZWQgb2Ygc2FuaXRpemVkXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpY2gtdGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBzYW5pdGl6ZWQ0fX0gc3R5bGU9e3twYWRkaW5nOiBcIjEwcHhcIiwgYm9yZGVyOiBcInNvbGlkIDFweCAjY2NjXCJ9fS8+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgU2FuaXRpemVkIEhUTUwgKGNvbnRhaW5lcnMgYXJlIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntzYW5pdGl6ZWQ0XzJ9PC9jb2RlPlxuICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBPcmlnaW5hbCBIVE1MOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e1RFWFRfRlJPTV9TRVJWRVJfNX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgU2FuaXRpemVkIEhUTUwgKGR1cmluZyBzYW5pdGl6YXRpb24gaW1hZ2VzIGFyZSByZXNvbHZlZCwgc2luY2UgdGhlIG9yaWdpbmFsIHNvdXJjZSBpc24ndCB0cnVzdGVkIGFueXdheSk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57c2FuaXRpemVkNX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRGlzcGxheWVkIG9mIHNhbml0aXplZFxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWNoLXRleHRcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogc2FuaXRpemVkNX19IHN0eWxlPXt7cGFkZGluZzogXCIxMHB4XCIsIGJvcmRlcjogXCJzb2xpZCAxcHggI2NjY1wifX0vPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIEdlbmVyYXRlZCBmb3IgZW1haWxcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntzYW5pdGl6ZWQ1XzJ9PC9jb2RlPlxuICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkoe2ZpbGVzVG9BdHRhY2gsIGNpZEZpbGVzVG9BdHRhY2h9LCBudWxsLCAyKX08L2NvZGU+XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIE9yaWdpbmFsIFBMQUlOIFRFWFQ6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkoVEVYVF9GUk9NX1NFUlZFUl82KX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgRGVzZXJpYWxpemVkIFBsYW4gVGV4dCBUcmVlIChUaGUgdHJlZSBjYW4gYmUgdXNlZCBzbyB0aGUgcmljaCB0ZXh0IGVkaXRvciBjYW4gcHJvZHVjZS91c2UgcGxhaW4gdGV4dCB0b28gdG8ga2VlcCBjb25zaXN0ZW5jeSk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkodGV4dFRyZWU2LCBudWxsLCAyKX08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgUmVzZXJpYWxpemVkIE9yaWdpbmFsOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e0pTT04uc3RyaW5naWZ5KHJlU2VyaWFsaXplZDYsIG51bGwsIDIpfTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBSZXNlcmlhbGl6ZWQgRm9yY2UgSFRNTCAoQmFkIHByYWN0aXNlKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntKU09OLnN0cmluZ2lmeShyZVNlcmlhbGl6ZWQ2XzMsIG51bGwsIDIpfTwvY29kZT5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuUmVhY3RET00ucmVuZGVyKDxFeGFtcGxlIC8+LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwcFwiKSk7Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQkFBa0I7QUFDbEIsdUJBQXFCO0FBS3JCLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBRzNCLElBQU0sYUFBYSxTQUFTO0FBQUEsRUFDMUIsY0FBYztBQUNoQixHQUFHO0FBQUEsRUFDRCxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RCLGtCQUFrQixDQUFDO0FBQUEsRUFDbkIsc0JBQXNCLENBQUM7QUFBQSxFQUN2QixpQkFBaUIsQ0FBQztBQUFBLEVBQ2xCLG9CQUFvQjtBQUFBLEVBQ3BCLGdCQUFnQjtBQUFBLEVBQ2hCLHNCQUFzQjtBQUFBLEVBQ3RCLHVCQUF1QjtBQUFBLEVBQ3ZCLGVBQWU7QUFBQSxFQUNmLHFCQUFxQjtBQUFBLEVBQ3JCLGdCQUFnQjtBQUFBLEVBQ2hCLHNCQUFzQjtBQUFBLEVBQ3RCLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLHFCQUFxQjtBQUFBLEVBQ3JCLGdCQUFnQjtBQUFBLEVBQ2hCLG9CQUFvQjtBQUFBLEVBQ3BCLGVBQWU7QUFBQSxFQUNmLGdCQUFnQjtBQUNsQixHQUFHLGtCQUFrQjtBQUVyQixJQUFNLGFBQWEsU0FBUztBQUFBLEVBQzFCLGNBQWM7QUFDaEIsR0FBRztBQUFBLEVBQ0QscUJBQXFCLENBQUM7QUFBQSxFQUN0QixrQkFBa0IsQ0FBQztBQUFBLEVBQ25CLHNCQUFzQixDQUFDO0FBQUEsRUFDdkIsaUJBQWlCLENBQUM7QUFBQSxFQUNsQixvQkFBb0I7QUFBQSxFQUNwQixnQkFBZ0I7QUFBQSxFQUNoQixzQkFBc0I7QUFBQSxFQUN0Qix1QkFBdUI7QUFBQSxFQUN2QixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixzQkFBc0I7QUFBQSxFQUN0QixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixvQkFBb0I7QUFBQSxFQUNwQixlQUFlO0FBQUEsRUFDZixnQkFBZ0I7QUFDbEIsR0FBRyxrQkFBa0I7QUFFckIsSUFBTSxhQUFhLFNBQVM7QUFBQSxFQUMxQixjQUFjO0FBQ2hCLEdBQUc7QUFBQSxFQUNELHFCQUFxQixDQUFDO0FBQUEsRUFDdEIsa0JBQWtCLENBQUM7QUFBQSxFQUNuQixzQkFBc0IsQ0FBQztBQUFBLEVBQ3ZCLGlCQUFpQixDQUFDO0FBQUEsRUFDbEIsb0JBQW9CO0FBQUEsRUFDcEIsZ0JBQWdCO0FBQUEsRUFDaEIsc0JBQXNCO0FBQUE7QUFBQSxFQUV0Qix1QkFBdUI7QUFBQSxFQUN2QixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixzQkFBc0I7QUFBQSxFQUN0QixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixvQkFBb0I7QUFBQSxFQUNwQixlQUFlO0FBQUEsRUFDZixnQkFBZ0I7QUFDbEIsR0FBRyxrQkFBa0I7QUFFckIsSUFBTSxhQUFhLFNBQVM7QUFBQSxFQUMxQixjQUFjO0FBQ2hCLEdBQUc7QUFBQSxFQUNELHFCQUFxQixDQUFDLE9BQU87QUFBQSxFQUM3QixrQkFBa0IsQ0FBQztBQUFBLEVBQ25CLHNCQUFzQixDQUFDLGdCQUFnQjtBQUFBLEVBQ3ZDLGlCQUFpQixDQUFDO0FBQUEsRUFDbEIsb0JBQW9CO0FBQUEsRUFDcEIsZ0JBQWdCO0FBQUEsRUFDaEIsc0JBQXNCO0FBQUE7QUFBQSxFQUV0Qix1QkFBdUI7QUFBQSxFQUN2QixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixzQkFBc0I7QUFBQSxFQUN0QixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixxQkFBcUI7QUFBQSxFQUNyQixnQkFBZ0I7QUFBQSxFQUNoQixvQkFBb0I7QUFBQSxFQUNwQixlQUFlO0FBQUEsRUFDZixnQkFBZ0I7QUFDbEIsR0FBRyxrQkFBa0I7QUFFckIsSUFBTSxlQUFlLFNBQVM7QUFBQSxFQUM1QixjQUFjO0FBQ2hCLEdBQUc7QUFBQSxFQUNELHFCQUFxQixDQUFDO0FBQUEsRUFDdEIsa0JBQWtCLENBQUM7QUFBQSxFQUNuQixzQkFBc0IsQ0FBQztBQUFBLEVBQ3ZCLGlCQUFpQixDQUFDO0FBQUE7QUFBQSxFQUVsQixvQkFBb0I7QUFBQSxFQUNwQixnQkFBZ0I7QUFBQSxFQUNoQixzQkFBc0I7QUFBQTtBQUFBLEVBRXRCLHVCQUF1QjtBQUFBLEVBQ3ZCLGVBQWU7QUFBQSxFQUNmLHFCQUFxQjtBQUFBLEVBQ3JCLGdCQUFnQjtBQUFBLEVBQ2hCLHNCQUFzQjtBQUFBLEVBQ3RCLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLHFCQUFxQjtBQUFBLEVBQ3JCLGdCQUFnQjtBQUFBLEVBQ2hCLG9CQUFvQjtBQUFBLEVBQ3BCLGVBQWU7QUFBQSxFQUNmLGdCQUFnQjtBQUNsQixHQUFHLGtCQUFrQjtBQUVyQixJQUFNLGFBQWEsU0FBUztBQUFBO0FBQUEsRUFFMUIsY0FBYyxDQUFDLE9BQWU7QUFFNUIsV0FBTztBQUFBLE1BQ0wsS0FBSztBQUFBO0FBQUEsSUFFUDtBQUFBLEVBQ0Y7QUFDRixHQUFHO0FBQUEsRUFDRCxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RCLGtCQUFrQixDQUFDO0FBQUEsRUFDbkIsc0JBQXNCLENBQUM7QUFBQSxFQUN2QixpQkFBaUIsQ0FBQztBQUFBLEVBQ2xCLG9CQUFvQjtBQUFBLEVBQ3BCLGdCQUFnQjtBQUFBLEVBQ2hCLHNCQUFzQjtBQUFBO0FBQUEsRUFFdEIsdUJBQXVCO0FBQUEsRUFDdkIsZUFBZTtBQUFBLEVBQ2YscUJBQXFCO0FBQUEsRUFDckIsZ0JBQWdCO0FBQUEsRUFDaEIsc0JBQXNCO0FBQUEsRUFDdEIsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YscUJBQXFCO0FBQUEsRUFDckIsZ0JBQWdCO0FBQUEsRUFDaEIsb0JBQW9CO0FBQUEsRUFDcEIsZUFBZTtBQUFBLEVBQ2YsZ0JBQWdCO0FBQ2xCLEdBQUcsa0JBQWtCO0FBRXJCLElBQU0sZ0JBQTBCLENBQUM7QUFDakMsSUFBTSxtQkFBNkIsQ0FBQztBQUNwQyxJQUFNLGVBQWUsU0FBUztBQUFBO0FBQUEsRUFFNUIsY0FBYyxDQUFDLE9BQWU7QUFFNUIsV0FBTztBQUFBO0FBQUE7QUFBQSxNQUdMLEtBQUssU0FBUztBQUFBLElBQ2hCO0FBQUEsRUFDRjtBQUFBLEVBQ0EsTUFBTTtBQUFBLEVBQ04sc0JBQXNCLENBQUMsV0FBVztBQUNoQyxrQkFBYyxLQUFLLE1BQU07QUFBQSxFQUMzQjtBQUFBLEVBQ0EseUJBQXlCLENBQUMsV0FBVztBQUNuQyxxQkFBaUIsS0FBSyxNQUFNO0FBQUEsRUFDOUI7QUFDRixHQUFHO0FBQUEsRUFDRCxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RCLGtCQUFrQixDQUFDO0FBQUEsRUFDbkIsc0JBQXNCLENBQUM7QUFBQSxFQUN2QixpQkFBaUIsQ0FBQztBQUFBLEVBQ2xCLG9CQUFvQjtBQUFBLEVBQ3BCLGdCQUFnQjtBQUFBLEVBQ2hCLHNCQUFzQjtBQUFBO0FBQUEsRUFFdEIsdUJBQXVCO0FBQUEsRUFDdkIsZUFBZTtBQUFBLEVBQ2YscUJBQXFCO0FBQUEsRUFDckIsZ0JBQWdCO0FBQUEsRUFDaEIsc0JBQXNCO0FBQUEsRUFDdEIsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YscUJBQXFCO0FBQUEsRUFDckIsZ0JBQWdCO0FBQUEsRUFDaEIsb0JBQW9CO0FBQUEsRUFDcEIsZUFBZTtBQUFBLEVBQ2YsZ0JBQWdCO0FBQ2xCLEdBQUcsa0JBQWtCO0FBS3JCLElBQU0sWUFBWSxZQUFZLGtCQUFrQjtBQUVoRCxJQUFNLGNBQWMsWUFBWSxVQUFVO0FBRzFDLElBQU0sWUFBWSxZQUFZLFVBQVU7QUFFeEMsSUFBTSxZQUFZLFlBQVksVUFBVTtBQUd4QyxJQUFNLFlBQVksaUJBQWlCLGtCQUFrQjtBQUtyRCxJQUFNLGdCQUFnQixVQUFVLFNBQVM7QUFNekMsSUFBTSxrQkFBa0IsaUNBQ25CLFlBRG1CO0FBQUEsRUFFdEIsTUFBTTtBQUFBLEVBQ04sSUFBSTtBQUNOO0FBQ0EsSUFBTSxrQkFBa0IsZ0JBQWdCLGVBQWU7QUFHdkQsU0FBUyxVQUFVO0FBQ2pCLFNBQ0UsNkJBQUFBLFFBQUEsY0FBQyxhQUNDLDZCQUFBQSxRQUFBLGNBQUMsWUFBRyxtQ0FBaUMsR0FFckMsNkJBQUFBLFFBQUEsY0FBQyxpQkFDQyw2QkFBQUEsUUFBQSxjQUFDLGFBQUksZ0JBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sa0JBQW1CLEdBQzFCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSwwREFFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxVQUFXLEdBQ2xCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSwrQ0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxLQUFLLFVBQVUsV0FBVyxNQUFNLENBQUMsQ0FBRSxHQUMxQyw2QkFBQUEsUUFBQSxjQUFDLGFBQUksMkNBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sS0FBSyxVQUFVLGFBQWEsTUFBTSxDQUFDLENBQUUsQ0FDOUMsR0FFQSw2QkFBQUEsUUFBQSxjQUFDLGlCQUNDLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSxnQkFFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxrQkFBbUIsR0FDMUIsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLDBEQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLFVBQVcsR0FDbEIsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLDJDQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLEtBQUssVUFBVSxXQUFXLE1BQU0sQ0FBQyxDQUFFLENBQzVDLEdBRUEsNkJBQUFBLFFBQUEsY0FBQyxpQkFDQyw2QkFBQUEsUUFBQSxjQUFDLGFBQUksZ0JBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sa0JBQW1CLEdBQzFCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSwrQ0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxVQUFXLEdBQ2xCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSwyQ0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxLQUFLLFVBQVUsV0FBVyxNQUFNLENBQUMsQ0FBRSxDQUM1QyxHQUVBLDZCQUFBQSxRQUFBLGNBQUMsaUJBQ0MsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLGdCQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLGtCQUFtQixHQUMxQiw2QkFBQUEsUUFBQSxjQUFDLGFBQUksa0VBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sVUFBVyxHQUNsQiw2QkFBQUEsUUFBQSxjQUFDLGFBQUksd0JBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLFNBQUksV0FBVSxhQUFZLHlCQUF5QixFQUFDLFFBQVEsV0FBVSxHQUFHLE9BQU8sRUFBQyxTQUFTLFFBQVEsUUFBUSxpQkFBZ0IsR0FBRSxHQUM3SCw2QkFBQUEsUUFBQSxjQUFDLGFBQUksOENBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sWUFBYSxDQUN0QixHQUVBLDZCQUFBQSxRQUFBLGNBQUMsaUJBQ0MsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLGdCQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLGtCQUFtQixHQUMxQiw2QkFBQUEsUUFBQSxjQUFDLGFBQUksMkdBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sVUFBVyxHQUNsQiw2QkFBQUEsUUFBQSxjQUFDLGFBQUksd0JBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLFNBQUksV0FBVSxhQUFZLHlCQUF5QixFQUFDLFFBQVEsV0FBVSxHQUFHLE9BQU8sRUFBQyxTQUFTLFFBQVEsUUFBUSxpQkFBZ0IsR0FBRSxHQUM3SCw2QkFBQUEsUUFBQSxjQUFDLGFBQUkscUJBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sWUFBYSxHQUNwQiw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sS0FBSyxVQUFVLEVBQUMsZUFBZSxpQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBRSxDQUNwRSxHQUVBLDZCQUFBQSxRQUFBLGNBQUMsaUJBQ0MsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLHNCQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLEtBQUssVUFBVSxrQkFBa0IsQ0FBRSxHQUMxQyw2QkFBQUEsUUFBQSxjQUFDLGFBQUksZ0lBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sS0FBSyxVQUFVLFdBQVcsTUFBTSxDQUFDLENBQUUsR0FDMUMsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLHdCQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxjQUFNLEtBQUssVUFBVSxlQUFlLE1BQU0sQ0FBQyxDQUFFLEdBQzlDLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSx5Q0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxLQUFLLFVBQVUsaUJBQWlCLE1BQU0sQ0FBQyxDQUFFLENBQ2xELENBQ0Y7QUFFSjtBQUVBLGlCQUFBQyxRQUFTLE9BQU8sNkJBQUFELFFBQUEsY0FBQyxhQUFRLEdBQUksU0FBUyxjQUFjLE1BQU0sQ0FBQzsiLAogICJuYW1lcyI6IFsiUmVhY3QiLCAiUmVhY3RET00iXQp9Cg==
