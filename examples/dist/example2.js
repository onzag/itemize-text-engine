import {
  renderTemplateDontSanitize,
  renderTemplateDynamically
} from "/dist/commons-I2VEM3TR.js";
import {
  MutatingTemplateArgs,
  TemplateArgs,
  __toESM,
  deserialize,
  require_react,
  require_react_dom,
  sanitize
} from "/dist/commons-2PRWFEI7.js";

// example2.tsx
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var featureSupport = {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  // notice this being true
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
};
var TEXT_FROM_SERVER_1 = '<p>Basic templating for <span class="inline" data-text="username">username</span></p>';
var sanitized1 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_1);
var rendered1 = renderTemplateDontSanitize(sanitized1, {
  username: "my name"
});
var textTree1 = deserialize(sanitized1);
var rendered1_2 = renderTemplateDynamically(textTree1, new TemplateArgs(
  {
    username: "my name"
  }
));
var TEXT_FROM_SERVER_2 = '<p data-style-hover="color: red">Click this <span class="inline" data-html="button">button</span></p>';
var sanitized2 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_2);
var textTree2 = deserialize(sanitized2);
var rendered2 = renderTemplateDynamically(textTree2, new TemplateArgs(
  {
    button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me") }, "click me!")
  }
));
var TEXT_FROM_SERVER_3 = '<ul><li data-for-each="buttons" data-html="button"><p>button</p></li></ul>';
var sanitized3 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_3);
var textTree3 = deserialize(sanitized3);
var rendered3 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: [
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 1") }, "click 1")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 2") }, "click 2")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 3") }, "click 3")
      })
    ]
  }
));
var MyInfoContext = import_react.default.createContext([]);
var MyInfoProvider = (props) => {
  const buttonSets = [
    ["button1", "button2", "button3"],
    ["button4", "button5", "button6"]
    // Add more button sets as needed
  ];
  const [currentSetIndex, setCurrentSetIndex] = (0, import_react.useState)(0);
  const currentSet = buttonSets[currentSetIndex];
  (0, import_react.useEffect)(() => {
    const intervalId = setInterval(() => {
      setCurrentSetIndex((prevIndex) => (prevIndex + 1) % buttonSets.length);
    }, 5e3);
    return () => clearInterval(intervalId);
  }, [currentSetIndex, buttonSets.length]);
  return /* @__PURE__ */ import_react.default.createElement(MyInfoContext.Provider, { value: currentSet }, props.children);
};
var rendered3_2 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: new MutatingTemplateArgs((children) => {
      return /* @__PURE__ */ import_react.default.createElement(MyInfoContext.Consumer, null, (values) => {
        return values.map((value) => {
          return children(new TemplateArgs(
            {
              button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked " + value) }, value)
            }
          ), value);
        });
      });
    })
  }
).wrappedBy((children) => {
  return /* @__PURE__ */ import_react.default.createElement(MyInfoProvider, null, children);
}));
var TEXT_FROM_SERVER_4 = '<p data-on-click="clickAction">click me!</p>';
var sanitized4 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_4);
var textTree4 = deserialize(sanitized4);
var rendered4 = renderTemplateDynamically(textTree4, new TemplateArgs(
  {
    clickAction: () => {
      alert("You clicked me");
    }
  }
));
var TEXT_FROM_SERVER_5 = '<div class="container"><p data-on-click="clickAction">click me!</p></div><div class="container"><a class="image"><div class="image-container"><div class="image-pad" style="padding-bottom: 56.25%"><img alt="example" data-src-height="720" data-src-id="FILEID" data-src-width="1280" loading="lazy"></div></div></a></div>';
var sanitized5 = sanitize({
  fileResolver: (id) => {
    return {
      src: "./img/example-img.jpeg"
      // no srcset specified
    };
  }
}, featureSupport, TEXT_FROM_SERVER_5);
var textTree5 = deserialize(sanitized5);
var rendered5 = renderTemplateDynamically(textTree5, new TemplateArgs(
  {
    clickAction: () => {
      alert("You clicked me");
    }
  }
), {
  onCustomAttributesFor: (element) => {
    if (element.type === "paragraph") {
      return {
        // now every paragraph will have this
        onMouseOver: () => {
          console.log("Over here");
        }
      };
    }
  },
  onCustom: (element, props, info) => {
    if (element.type === "image") {
      return /* @__PURE__ */ import_react.default.createElement("div", { style: { backgroundColor: "black" } }, info.defaultReturn());
    }
    return info.defaultReturn();
  },
  onCustomWrap: (element, elementAsNode, key) => {
    return /* @__PURE__ */ import_react.default.createElement("span", { style: { display: "contents" }, key }, elementAsNode);
  }
});
function Example() {
  return /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement("h1", null, "Advanced Displaying"), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Showing templating capabilities to fill content"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_1), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree:"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree1, null, 2)), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template"), /* @__PURE__ */ import_react.default.createElement("code", null, rendered1), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered1_2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Possibility to fill gaps of html content with dynamic react components"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_2), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Possibility to render templates using loops, and using mutating data"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_3), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component, with mutating data)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3_2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Assingning arbitrary functions based on a context"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_4), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered4)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, 'Full customization, all images get a black background, everything is wrapped in spans, and onMouseOver every paragraph will trigger a function call to log "Over here"'), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_5), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered5)));
}
import_react_dom.default.render(/* @__PURE__ */ import_react.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,
