import {
  DOMWindow,
  MutatingTemplateArgs,
  NULL_DOCUMENT,
  SERIALIZATION_REGISTRY,
  TemplateArgs,
  __toESM,
  deserialize,
  require_react,
  require_react_dom,
  sanitize
} from "/dist/commons.js";

// example2.tsx
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// ../renderer/index.tsx
var import_react = __toESM(require_react());
function processTemplateNodeInitialization(node, templateArgsContext, templateArgsRootcontext) {
  const ifKey = node.dataset.if;
  if (ifKey) {
    const ifValue = templateArgsContext[ifKey];
    if (!ifValue) {
      node.parentElement.removeChild(node);
      return;
    }
  }
  const textKey = node.dataset.text;
  if (textKey) {
    const text = templateArgsContext[textKey] || templateArgsRootcontext[textKey];
    if (typeof text !== "string") {
    } else {
      node.textContent = text;
    }
  }
  const threfKey = node.dataset.href;
  if (threfKey) {
    const thref = templateArgsContext[threfKey] || templateArgsRootcontext[threfKey];
    if (typeof thref !== "string") {
    } else {
      node.setAttribute("href", thref);
    }
  }
  const htmlKey = node.dataset.html;
  if (htmlKey) {
    const html = templateArgsContext[htmlKey] || templateArgsRootcontext[htmlKey];
    if (typeof html !== "string") {
    } else {
      node.innerHTML = html;
    }
  }
}
function processTemplateInitialization(node, templateArgsContext, templateArgsRootContext) {
  node.hasChildNodes() && node.childNodes.forEach((childNode) => {
    const childNodeASHTMLElement = childNode;
    let templateArgsNewContext = templateArgsContext;
    if (typeof childNodeASHTMLElement.dataset !== "undefined" && childNodeASHTMLElement.dataset) {
      const contextKey = childNodeASHTMLElement.dataset.context;
      if (contextKey) {
        templateArgsNewContext = templateArgsNewContext[contextKey];
      }
      const forEachKey = childNodeASHTMLElement.dataset.forEach;
      if (forEachKey) {
        const ifKey = childNodeASHTMLElement.dataset.if;
        const ifValue = ifKey && templateArgsNewContext[ifKey];
        if (ifKey && !ifValue) {
          node.parentElement.removeChild(node);
        } else {
          const forArgument = templateArgsNewContext[forEachKey];
          const nextSibling = childNodeASHTMLElement.nextSibling;
          forArgument.forEach((forEachContext, index) => {
            const clone = childNodeASHTMLElement.cloneNode(true);
            if (nextSibling) {
              childNodeASHTMLElement.parentElement.insertBefore(clone, nextSibling);
            } else {
              childNodeASHTMLElement.parentElement.appendChild(clone);
            }
            processTemplateNodeInitialization(
              clone,
              forEachContext,
              templateArgsRootContext
            );
            if (clone.hasChildNodes()) {
              processTemplateInitialization(
                clone,
                forEachContext,
                templateArgsRootContext
              );
            }
          });
          childNodeASHTMLElement.parentElement.removeChild(childNodeASHTMLElement);
        }
      } else {
        processTemplateNodeInitialization(
          childNodeASHTMLElement,
          templateArgsNewContext,
          templateArgsRootContext
        );
      }
    }
    if (childNodeASHTMLElement.hasChildNodes()) {
      processTemplateInitialization(
        childNodeASHTMLElement,
        templateArgsNewContext,
        templateArgsRootContext
      );
    }
  });
}
function renderTemplateAsNode(template, args) {
  const cheapdiv = DOMWindow.document.createElement("div");
  cheapdiv.innerHTML = template;
  processTemplateInitialization(
    cheapdiv,
    args,
    args
  );
  return cheapdiv;
}
function renderTemplateDontSanitize(template, args) {
  return renderTemplateAsNode(template, args).innerHTML;
}
function renderTemplateDynamically(document2, args, options = {}) {
  if (document2 === NULL_DOCUMENT) {
    return null;
  }
  const toReturn = /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, document2.children.map((c, index) => {
    return SERIALIZATION_REGISTRY.REACTIFY[c.type || "text"]({
      asTemplate: true,
      active: true,
      element: c,
      key: index,
      templateArgs: args,
      selected: false,
      extraOptions: options,
      parent: document2,
      tree: document2
    });
  }));
  if (args && args.wrapper) {
    return args.wrapper(toReturn);
  }
  return toReturn;
}

// example2.tsx
var featureSupport = {
  supportedContainers: [],
  supportedCustoms: [],
  supportedRichClasses: [],
  supportedTables: [],
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  // notice this being true
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
};
var TEXT_FROM_SERVER_1 = '<p>Basic templating for <span class="inline" data-text="username">username</span></p>';
var sanitized1 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_1);
var rendered1 = renderTemplateDontSanitize(sanitized1, {
  username: "my name"
});
var textTree1 = deserialize(sanitized1);
var rendered1_2 = renderTemplateDynamically(textTree1, new TemplateArgs(
  {
    username: "my name"
  }
));
var TEXT_FROM_SERVER_2 = '<p data-style-hover="color: red">Click this <span class="inline" data-html="button">button</span></p>';
var sanitized2 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_2);
var textTree2 = deserialize(sanitized2);
var rendered2 = renderTemplateDynamically(textTree2, new TemplateArgs(
  {
    button: /* @__PURE__ */ import_react2.default.createElement("button", { onClick: () => alert("You clicked me") }, "click me!")
  }
));
var TEXT_FROM_SERVER_3 = '<ul><li data-for-each="buttons" data-html="button"><p>button</p></li></ul>';
var sanitized3 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_3);
var textTree3 = deserialize(sanitized3);
var rendered3 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: [
      new TemplateArgs({
        button: /* @__PURE__ */ import_react2.default.createElement("button", { onClick: () => alert("You clicked me 1") }, "click 1")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react2.default.createElement("button", { onClick: () => alert("You clicked me 2") }, "click 2")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react2.default.createElement("button", { onClick: () => alert("You clicked me 3") }, "click 3")
      })
    ]
  }
));
var MyInfoContext = import_react2.default.createContext([]);
var MyInfoProvider = (props) => {
  const buttonSets = [
    ["button1", "button2", "button3"],
    ["button4", "button5", "button6"]
    // Add more button sets as needed
  ];
  const [currentSetIndex, setCurrentSetIndex] = (0, import_react2.useState)(0);
  const currentSet = buttonSets[currentSetIndex];
  (0, import_react2.useEffect)(() => {
    const intervalId = setInterval(() => {
      setCurrentSetIndex((prevIndex) => (prevIndex + 1) % buttonSets.length);
    }, 5e3);
    return () => clearInterval(intervalId);
  }, [currentSetIndex, buttonSets.length]);
  return /* @__PURE__ */ import_react2.default.createElement(MyInfoContext.Provider, { value: currentSet }, props.children);
};
var rendered3_2 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: new MutatingTemplateArgs((children) => {
      return /* @__PURE__ */ import_react2.default.createElement(MyInfoContext.Consumer, null, (values) => {
        return values.map((value) => {
          return children(new TemplateArgs(
            {
              button: /* @__PURE__ */ import_react2.default.createElement("button", { onClick: () => alert("You clicked " + value) }, value)
            }
          ), value);
        });
      });
    })
  }
).wrappedBy((children) => {
  return /* @__PURE__ */ import_react2.default.createElement(MyInfoProvider, null, children);
}));
function Example() {
  return /* @__PURE__ */ import_react2.default.createElement("div", null, /* @__PURE__ */ import_react2.default.createElement("h1", null, "Advanced Displaying"), /* @__PURE__ */ import_react2.default.createElement("section", null, /* @__PURE__ */ import_react2.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react2.default.createElement("code", null, TEXT_FROM_SERVER_1), /* @__PURE__ */ import_react2.default.createElement("div", null, "Deserialized HTML Tree:"), /* @__PURE__ */ import_react2.default.createElement("code", null, JSON.stringify(textTree1, null, 2)), /* @__PURE__ */ import_react2.default.createElement("div", null, "rendered template"), /* @__PURE__ */ import_react2.default.createElement("code", null, rendered1), /* @__PURE__ */ import_react2.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react2.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered1_2)), /* @__PURE__ */ import_react2.default.createElement("section", null, /* @__PURE__ */ import_react2.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react2.default.createElement("code", null, TEXT_FROM_SERVER_2), /* @__PURE__ */ import_react2.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react2.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered2)), /* @__PURE__ */ import_react2.default.createElement("section", null, /* @__PURE__ */ import_react2.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react2.default.createElement("code", null, TEXT_FROM_SERVER_3), /* @__PURE__ */ import_react2.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react2.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3), /* @__PURE__ */ import_react2.default.createElement("div", null, "rendered template dinamically (react component, with mutating data)"), /* @__PURE__ */ import_react2.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3_2)));
}
import_react_dom.default.render(/* @__PURE__ */ import_react2.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,
