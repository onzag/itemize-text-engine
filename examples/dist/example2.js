import {
  renderTemplateDontSanitize,
  renderTemplateDynamically
} from "/dist/commons-I2VEM3TR.js";
import {
  MutatingTemplateArgs,
  TemplateArgs,
  __toESM,
  deserialize,
  require_react,
  require_react_dom,
  sanitize
} from "/dist/commons-2PRWFEI7.js";

// example2.tsx
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var featureSupport = {
  supportedContainers: null,
  supportedCustoms: null,
  supportedRichClasses: null,
  supportedTables: null,
  supportsContainers: true,
  supportsCustom: true,
  supportsCustomStyles: true,
  supportsExternalLinks: true,
  supportsFiles: true,
  supportsFilesAccept: null,
  supportsImages: true,
  supportsImagesAccept: null,
  supportsLinks: true,
  supportsLists: true,
  supportsQuote: true,
  supportsRichClasses: true,
  supportsTables: true,
  // notice this being true
  supportsTemplating: true,
  supportsTitle: true,
  supportsVideos: true
};
var TEXT_FROM_SERVER_1 = '<p>Basic templating for <span class="inline" data-text="username">username</span></p>';
var sanitized1 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_1);
var rendered1 = renderTemplateDontSanitize(sanitized1, {
  username: "my name"
});
var textTree1 = deserialize(sanitized1);
var rendered1_2 = renderTemplateDynamically(textTree1, new TemplateArgs(
  {
    username: "my name"
  }
));
var TEXT_FROM_SERVER_2 = '<p data-style-hover="color: red">Click this <span class="inline" data-html="button">button</span></p>';
var sanitized2 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_2);
var textTree2 = deserialize(sanitized2);
var rendered2 = renderTemplateDynamically(textTree2, new TemplateArgs(
  {
    button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me") }, "click me!")
  }
));
var TEXT_FROM_SERVER_3 = '<ul><li data-for-each="buttons" data-html="button"><p>button</p></li></ul>';
var sanitized3 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_3);
var textTree3 = deserialize(sanitized3);
var rendered3 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: [
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 1") }, "click 1")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 2") }, "click 2")
      }),
      new TemplateArgs({
        button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked me 3") }, "click 3")
      })
    ]
  }
));
var MyInfoContext = import_react.default.createContext([]);
var MyInfoProvider = (props) => {
  const buttonSets = [
    ["button1", "button2", "button3"],
    ["button4", "button5", "button6"]
    // Add more button sets as needed
  ];
  const [currentSetIndex, setCurrentSetIndex] = (0, import_react.useState)(0);
  const currentSet = buttonSets[currentSetIndex];
  (0, import_react.useEffect)(() => {
    const intervalId = setInterval(() => {
      setCurrentSetIndex((prevIndex) => (prevIndex + 1) % buttonSets.length);
    }, 5e3);
    return () => clearInterval(intervalId);
  }, [currentSetIndex, buttonSets.length]);
  return /* @__PURE__ */ import_react.default.createElement(MyInfoContext.Provider, { value: currentSet }, props.children);
};
var rendered3_2 = renderTemplateDynamically(textTree3, new TemplateArgs(
  {
    buttons: new MutatingTemplateArgs((children) => {
      return /* @__PURE__ */ import_react.default.createElement(MyInfoContext.Consumer, null, (values) => {
        return values.map((value) => {
          return children(new TemplateArgs(
            {
              button: /* @__PURE__ */ import_react.default.createElement("button", { onClick: () => alert("You clicked " + value) }, value)
            }
          ), value);
        });
      });
    })
  }
).wrappedBy((children) => {
  return /* @__PURE__ */ import_react.default.createElement(MyInfoProvider, null, children);
}));
var TEXT_FROM_SERVER_4 = '<p data-on-click="clickAction">click me!</p>';
var sanitized4 = sanitize({
  fileResolver: null
}, featureSupport, TEXT_FROM_SERVER_4);
var textTree4 = deserialize(sanitized4);
var rendered4 = renderTemplateDynamically(textTree4, new TemplateArgs(
  {
    clickAction: () => {
      alert("You clicked me");
    }
  }
));
var TEXT_FROM_SERVER_5 = '<div class="container"><p data-on-click="clickAction">click me!</p></div><div class="container"><a class="image"><div class="image-container"><div class="image-pad" style="padding-bottom: 56.25%"><img alt="example" data-src-height="720" data-src-id="FILEID" data-src-width="1280" loading="lazy"></div></div></a></div>';
var sanitized5 = sanitize({
  fileResolver: (id) => {
    return {
      src: "./img/example-img.jpeg"
      // no srcset specified
    };
  }
}, featureSupport, TEXT_FROM_SERVER_5);
var textTree5 = deserialize(sanitized5);
var rendered5 = renderTemplateDynamically(textTree5, new TemplateArgs(
  {
    clickAction: () => {
      alert("You clicked me");
    }
  }
), {
  onCustomAttributesFor: (element) => {
    if (element.type === "paragraph") {
      return {
        // now every paragraph will have this
        onMouseOver: () => {
          console.log("Over here");
        }
      };
    }
  },
  onCustom: (element, props, info) => {
    if (element.type === "image") {
      return /* @__PURE__ */ import_react.default.createElement("div", { style: { backgroundColor: "black" } }, info.defaultReturn());
    }
    return info.defaultReturn();
  },
  onCustomWrap: (element, elementAsNode, key) => {
    return /* @__PURE__ */ import_react.default.createElement("span", { style: { display: "contents" }, key }, elementAsNode);
  }
});
function Example() {
  return /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement("h1", null, "Advanced Displaying"), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Showing templating capabilities to fill content"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_1), /* @__PURE__ */ import_react.default.createElement("div", null, "Deserialized HTML Tree:"), /* @__PURE__ */ import_react.default.createElement("code", null, JSON.stringify(textTree1, null, 2)), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template"), /* @__PURE__ */ import_react.default.createElement("code", null, rendered1), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered1_2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Possibility to fill gaps of html content with dynamic react components"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_2), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Possibility to render templates using loops, and using mutating data"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_3), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component, with mutating data)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered3_2)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, "Assingning arbitrary functions based on a context"), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_4), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered4)), /* @__PURE__ */ import_react.default.createElement("section", null, /* @__PURE__ */ import_react.default.createElement("h4", null, 'Full customization, all images get a black background, everything is wrapped in spans, and onMouseOver every paragraph will trigger a function call to log "Over here"'), /* @__PURE__ */ import_react.default.createElement("div", null, "Original HTML (also sanitized):"), /* @__PURE__ */ import_react.default.createElement("code", null, TEXT_FROM_SERVER_5), /* @__PURE__ */ import_react.default.createElement("div", null, "rendered template dinamically (react component)"), /* @__PURE__ */ import_react.default.createElement("div", { className: "rich-text", style: { padding: "10px", border: "solid 1px #ccc" } }, rendered5)));
}
import_react_dom.default.render(/* @__PURE__ */ import_react.default.createElement(Example, null), document.querySelector("#app"));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vZXhhbXBsZTIudHN4Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCB7IGRlc2VyaWFsaXplIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IElGZWF0dXJlU3VwcG9ydE9wdGlvbnMsIHNhbml0aXplIH0gZnJvbSBcIi4uL3Nhbml0aXplclwiO1xuaW1wb3J0IHsgcmVuZGVyVGVtcGxhdGVEb250U2FuaXRpemUsIHJlbmRlclRlbXBsYXRlRHluYW1pY2FsbHkgfSBmcm9tIFwiLi4vcmVuZGVyZXJcIjtcbmltcG9ydCB7IE11dGF0aW5nVGVtcGxhdGVBcmdzLCBUZW1wbGF0ZUFyZ3MgfSBmcm9tIFwiLi4vc2VyaWFsaXplci90ZW1wbGF0ZS1hcmdzXCI7XG5pbXBvcnQgeyBJUGFyYWdyYXBoIH0gZnJvbSBcIi4uL3NlcmlhbGl6ZXIvdHlwZXMvcGFyYWdyYXBoXCI7XG5pbXBvcnQgeyBJSW1hZ2UgfSBmcm9tIFwiLi4vc2VyaWFsaXplci90eXBlcy9pbWFnZVwiO1xuXG5jb25zdCBmZWF0dXJlU3VwcG9ydDogSUZlYXR1cmVTdXBwb3J0T3B0aW9ucyA9IHtcbiAgc3VwcG9ydGVkQ29udGFpbmVyczogbnVsbCxcbiAgc3VwcG9ydGVkQ3VzdG9tczogbnVsbCxcbiAgc3VwcG9ydGVkUmljaENsYXNzZXM6IG51bGwsXG4gIHN1cHBvcnRlZFRhYmxlczogbnVsbCxcbiAgc3VwcG9ydHNDb250YWluZXJzOiB0cnVlLFxuICBzdXBwb3J0c0N1c3RvbTogdHJ1ZSxcbiAgc3VwcG9ydHNDdXN0b21TdHlsZXM6IHRydWUsXG4gIHN1cHBvcnRzRXh0ZXJuYWxMaW5rczogdHJ1ZSxcbiAgc3VwcG9ydHNGaWxlczogdHJ1ZSxcbiAgc3VwcG9ydHNGaWxlc0FjY2VwdDogbnVsbCxcbiAgc3VwcG9ydHNJbWFnZXM6IHRydWUsXG4gIHN1cHBvcnRzSW1hZ2VzQWNjZXB0OiBudWxsLFxuICBzdXBwb3J0c0xpbmtzOiB0cnVlLFxuICBzdXBwb3J0c0xpc3RzOiB0cnVlLFxuICBzdXBwb3J0c1F1b3RlOiB0cnVlLFxuICBzdXBwb3J0c1JpY2hDbGFzc2VzOiB0cnVlLFxuICBzdXBwb3J0c1RhYmxlczogdHJ1ZSxcbiAgLy8gbm90aWNlIHRoaXMgYmVpbmcgdHJ1ZVxuICBzdXBwb3J0c1RlbXBsYXRpbmc6IHRydWUsXG4gIHN1cHBvcnRzVGl0bGU6IHRydWUsXG4gIHN1cHBvcnRzVmlkZW9zOiB0cnVlLFxufTtcblxuLy8gbm90ZSBob3cgdGhpcyBzcGVjaWZpZXMgdGhlIGlubGluZSBjbGFzc1xuLy8gdGhhdCBpcyBiZWNhdXNlIHNwYW4gaXMgYWxzbyB1c2VkIGluIHRoZSB0ZXh0IHR5cGUgdG8gbWFrZSBmb3Jcbi8vIGN1c3RvbSBzdHlsZXMsIG9ubHkgdGhlIGlubGluZSB0YWcgYWxsb3dzIGZvciBjdXN0b20gcHJvcGVydGllc1xuLy8gb3RoZXJ3aXNlIGl0IHdpbGwgdmFuaXNoLCB3aGlsZSBpdCB3aWxsIHN1cnZpdmUgc2FuaXRpemF0aW9uIGl0IHdpbGwgbm90IHN1cnZpdmUgZGVzZXJpYWxpemF0aW9uXG4vLyBvbmNlIHRoZSBub3JtYWxpemVyIGNhdGNoZXMgaXQsIHNwYW4gaXMgdXNlZCBmb3IgdGV4dCBzdHlsZXMsIGFuZCBzcGFuLmlubGluZSBpcyBhbiBpbmxpbmUgZWxlbWVudFxuLy8gZm9yIG90aGVyIHB1cnBvc2VzXG5jb25zdCBURVhUX0ZST01fU0VSVkVSXzEgPSAnPHA+QmFzaWMgdGVtcGxhdGluZyBmb3IgPHNwYW4gY2xhc3M9XCJpbmxpbmVcIiBkYXRhLXRleHQ9XCJ1c2VybmFtZVwiPnVzZXJuYW1lPC9zcGFuPjwvcD4nO1xuXG5jb25zdCBzYW5pdGl6ZWQxID0gc2FuaXRpemUoe1xuICBmaWxlUmVzb2x2ZXI6IG51bGwsXG59LCBmZWF0dXJlU3VwcG9ydCwgVEVYVF9GUk9NX1NFUlZFUl8xKTtcblxuLy8gdGhlIHJlbmRlciB0ZW1wbGF0ZSBtZXRob2QgaXMgbGltaXRlZCBxdWl0ZSBhIGJpdFxuY29uc3QgcmVuZGVyZWQxID0gcmVuZGVyVGVtcGxhdGVEb250U2FuaXRpemUoc2FuaXRpemVkMSwge1xuICB1c2VybmFtZTogXCJteSBuYW1lXCIsXG59KTtcblxuY29uc3QgdGV4dFRyZWUxID0gZGVzZXJpYWxpemUoc2FuaXRpemVkMSk7XG5cbmNvbnN0IHJlbmRlcmVkMV8yID0gcmVuZGVyVGVtcGxhdGVEeW5hbWljYWxseSh0ZXh0VHJlZTEsIG5ldyBUZW1wbGF0ZUFyZ3MoXG4gIHtcbiAgICB1c2VybmFtZTogXCJteSBuYW1lXCIsXG4gIH1cbikpO1xuXG4vLyByZW5kZXJpbmcgYXMgYSByZWFjdCBjb21wb25lbnQgYWxsb3dzIGZvciBmdWxsIGN1c3RvbWl6YXRpb24gb25cbi8vIGhvdyB0aGluZ3MgYXJlIHJlbmRlcmVkLCBpdCBhbHNvIGhhcyBxdWl0ZSBhIG1vcmUgcmFuZ2Ugb24gd2hhdCBpdCBjYW4gYW5kIGNhbid0IGRvXG4vLyBmb3IgZXhhbXBsZSBkYXRhLXN0eWxlLWhvdmVyIGlzIG5vdyBmdW5jdGlvbmFsIGlzIGFsbG93ZWQgYnkgdGhlIGZlYXR1cmUgc3VwcG9ydCwgYW5kIHdoZW5cbi8vIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0ZXh0LWh0bWwgeW91IGNhbiBoYXZlIGEgbG90IG9mIGZsZXhpYmlsaXR5XG4vLyBub3RlIHRoYXQgaXQncyBwb3NzaWJsZSB0byBpbmZvcm0gdGhlIGVkaXRvciBhYm91dCB0aGlzIHRvbyBzbyB0aGUgZWRpdGluZyBleHBlcmllbmNlXG4vLyBpcyBhbHNvIGdyZWF0XG5jb25zdCBURVhUX0ZST01fU0VSVkVSXzIgPSAnPHAgZGF0YS1zdHlsZS1ob3Zlcj1cImNvbG9yOiByZWRcIj5DbGljayB0aGlzIDxzcGFuIGNsYXNzPVwiaW5saW5lXCIgZGF0YS1odG1sPVwiYnV0dG9uXCI+YnV0dG9uPC9zcGFuPjwvcD4nO1xuY29uc3Qgc2FuaXRpemVkMiA9IHNhbml0aXplKHtcbiAgZmlsZVJlc29sdmVyOiBudWxsLFxufSwgZmVhdHVyZVN1cHBvcnQsIFRFWFRfRlJPTV9TRVJWRVJfMik7XG5jb25zdCB0ZXh0VHJlZTIgPSBkZXNlcmlhbGl6ZShzYW5pdGl6ZWQyKTtcbmNvbnN0IHJlbmRlcmVkMiA9IHJlbmRlclRlbXBsYXRlRHluYW1pY2FsbHkodGV4dFRyZWUyLCBuZXcgVGVtcGxhdGVBcmdzKFxuICB7XG4gICAgYnV0dG9uOiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGFsZXJ0KFwiWW91IGNsaWNrZWQgbWVcIil9PmNsaWNrIG1lITwvYnV0dG9uPixcbiAgfVxuKSk7XG5cbi8vIG90aGVyIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMgYXJlIGFsc28gaW5jbHVkZWQgd2l0aCBkeW5hbWljIHJlbmRlcnNcbi8vIHNvbWUgb2YgdGhlbSB3b3JrIHdpdGggc3RhdGljIHRvbyBmb3IgZXhhbXBsZSwgbGV0J3MgbWFrZSBhIGxvb3AgZm9yIGEgbGlzdFxuY29uc3QgVEVYVF9GUk9NX1NFUlZFUl8zID0gJzx1bD48bGkgZGF0YS1mb3ItZWFjaD1cImJ1dHRvbnNcIiBkYXRhLWh0bWw9XCJidXR0b25cIj48cD5idXR0b248L3A+PC9saT48L3VsPic7XG5jb25zdCBzYW5pdGl6ZWQzID0gc2FuaXRpemUoe1xuICBmaWxlUmVzb2x2ZXI6IG51bGwsXG59LCBmZWF0dXJlU3VwcG9ydCwgVEVYVF9GUk9NX1NFUlZFUl8zKTtcbmNvbnN0IHRleHRUcmVlMyA9IGRlc2VyaWFsaXplKHNhbml0aXplZDMpO1xuY29uc3QgcmVuZGVyZWQzID0gcmVuZGVyVGVtcGxhdGVEeW5hbWljYWxseSh0ZXh0VHJlZTMsIG5ldyBUZW1wbGF0ZUFyZ3MoXG4gIHtcbiAgICBidXR0b25zOiBbXG4gICAgICBuZXcgVGVtcGxhdGVBcmdzKHtcbiAgICAgICAgYnV0dG9uOiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGFsZXJ0KFwiWW91IGNsaWNrZWQgbWUgMVwiKX0+Y2xpY2sgMTwvYnV0dG9uPlxuICAgICAgfSksXG4gICAgICBuZXcgVGVtcGxhdGVBcmdzKHtcbiAgICAgICAgYnV0dG9uOiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGFsZXJ0KFwiWW91IGNsaWNrZWQgbWUgMlwiKX0+Y2xpY2sgMjwvYnV0dG9uPlxuICAgICAgfSksXG4gICAgICBuZXcgVGVtcGxhdGVBcmdzKHtcbiAgICAgICAgYnV0dG9uOiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGFsZXJ0KFwiWW91IGNsaWNrZWQgbWUgM1wiKX0+Y2xpY2sgMzwvYnV0dG9uPlxuICAgICAgfSksXG4gICAgXVxuICB9XG4pKTtcblxuY29uc3QgTXlJbmZvQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8c3RyaW5nW10+KFtdKTtcblxuY29uc3QgTXlJbmZvUHJvdmlkZXIgPSAocHJvcHM6IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiB7XG4gIGNvbnN0IGJ1dHRvblNldHMgPSBbXG4gICAgWydidXR0b24xJywgJ2J1dHRvbjInLCAnYnV0dG9uMyddLFxuICAgIFsnYnV0dG9uNCcsICdidXR0b241JywgJ2J1dHRvbjYnXSxcbiAgICAvLyBBZGQgbW9yZSBidXR0b24gc2V0cyBhcyBuZWVkZWRcbiAgXTtcblxuICBjb25zdCBbY3VycmVudFNldEluZGV4LCBzZXRDdXJyZW50U2V0SW5kZXhdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IGN1cnJlbnRTZXQgPSBidXR0b25TZXRzW2N1cnJlbnRTZXRJbmRleF07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgc2V0Q3VycmVudFNldEluZGV4KChwcmV2SW5kZXgpID0+IChwcmV2SW5kZXggKyAxKSAlIGJ1dHRvblNldHMubGVuZ3RoKTtcbiAgICB9LCA1MDAwKTtcblxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICB9LCBbY3VycmVudFNldEluZGV4LCBidXR0b25TZXRzLmxlbmd0aF0pO1xuXG4gIHJldHVybiAoXG4gICAgPE15SW5mb0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2N1cnJlbnRTZXR9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvTXlJbmZvQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbi8vIGl0IGlzIGFsc28gcG9zc2libGUgdG8gbWFrZSBtdXRhdGluZyBjb250ZXh0cywgbXV0YXRpbmcgZnVuY3Rpb25zLCB0aGF0IGRlcGVuZCBvbiBjb250ZXh0c1xuLy8gdGhpcyBjYW4gYmUgdXNlZCB0byBjcmVhdGUgaW5jcmVkaWJsZWx5IGNvbXBsaWNhdGVkIGFuZCBpbnRyaW5jYXRlIGJlaGF2aW91cnNcbi8vIGFsbCBvZiBpdCB3aGljaCBpcyBlZGl0YWJsZSAod2lsbCBiZSBzaG93biBob3cgdG8gZG8gbGF0ZXIgb24pXG5jb25zdCByZW5kZXJlZDNfMiA9IHJlbmRlclRlbXBsYXRlRHluYW1pY2FsbHkodGV4dFRyZWUzLCBuZXcgVGVtcGxhdGVBcmdzKFxuICB7XG4gICAgYnV0dG9uczogbmV3IE11dGF0aW5nVGVtcGxhdGVBcmdzKChjaGlsZHJlbikgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPE15SW5mb0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgICAgeyh2YWx1ZXMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4obmV3IFRlbXBsYXRlQXJncyhcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBidXR0b246IDxidXR0b24gb25DbGljaz17KCkgPT4gYWxlcnQoXCJZb3UgY2xpY2tlZCBcIiArIHZhbHVlKX0+e3ZhbHVlfTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKSwgdmFsdWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9fVxuICAgICAgICA8L015SW5mb0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICApXG4gICAgfSksXG4gIH1cbikud3JhcHBlZEJ5KChjaGlsZHJlbikgPT4ge1xuICAvLyB0aGlzIGNvbnRleHQgY291bGQgYmUgYW55d2hlcmUsIGJ1dCB3ZSBhcmUgcHV0dGluZyBpdCBoZXJlXG4gIC8vIHRoZSB3cmFwcGVkIGJ5IGZ1bmN0aW9uYWxpdHkgY2FuIHdyYXAgZm9yIGFueSByZWFzb25cbiAgLy8gZXZlbiBpZiBpdCdzIHN0eWxpc3RpYywgYnV0IGl0J3MgbWVhbnQgdG8gYmUgdXNlZCBmb3JcbiAgLy8gcGFzc2luZyBkb3duIGNvbnRleHRzXG5cbiAgLy8gZWZmZWN0aXZlbHkgYmVjYXVzZSB0aGlzIGlzIGEgcmVhY3QgY29tcG9uZW50IGlmIHRoZSBkYXRhIGNoYW5nZXNcbiAgLy8gdGhlbiB0aGUgZGlzcGxheSBjaGFuZ2VzXG4gIHJldHVybiAoXG4gICAgPE15SW5mb1Byb3ZpZGVyPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTXlJbmZvUHJvdmlkZXI+XG4gICk7XG59KSk7XG5cbi8vIFlvdSBtYXkgYWxzbyBkZWZpbmUgZnVuY3Rpb25zXG4vLyBvbiB0aGlzIGJlaGF2aW91clxuY29uc3QgVEVYVF9GUk9NX1NFUlZFUl80ID0gJzxwIGRhdGEtb24tY2xpY2s9XCJjbGlja0FjdGlvblwiPmNsaWNrIG1lITwvcD4nO1xuXG5jb25zdCBzYW5pdGl6ZWQ0ID0gc2FuaXRpemUoe1xuICBmaWxlUmVzb2x2ZXI6IG51bGwsXG59LCBmZWF0dXJlU3VwcG9ydCwgVEVYVF9GUk9NX1NFUlZFUl80KTtcbmNvbnN0IHRleHRUcmVlNCA9IGRlc2VyaWFsaXplKHNhbml0aXplZDQpO1xuY29uc3QgcmVuZGVyZWQ0ID0gcmVuZGVyVGVtcGxhdGVEeW5hbWljYWxseSh0ZXh0VHJlZTQsIG5ldyBUZW1wbGF0ZUFyZ3MoXG4gIHtcbiAgICBjbGlja0FjdGlvbjogKCkgPT4ge1xuICAgICAgYWxlcnQoXCJZb3UgY2xpY2tlZCBtZVwiKTtcbiAgICB9XG4gIH1cbikpO1xuXG4vLyBvZiBjb3Vyc2UgYXQgdGhlIGVuZCBvZiB0aGUgZGF5XG4vLyB5b3UgY2FuIGRvIHdoYXRldmVyIHlvdSB3YW50IHdpdGggdGhpc1xuLy8gd2l0aCBmdWxsIGN1c3RvbWl6YXRpb25cbmNvbnN0IFRFWFRfRlJPTV9TRVJWRVJfNSA9ICc8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+PHAgZGF0YS1vbi1jbGljaz1cImNsaWNrQWN0aW9uXCI+Y2xpY2sgbWUhPC9wPjwvZGl2PjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj48YSBjbGFzcz1cImltYWdlXCI+PGRpdiBjbGFzcz1cImltYWdlLWNvbnRhaW5lclwiPjxkaXYgY2xhc3M9XCJpbWFnZS1wYWRcIiBzdHlsZT1cInBhZGRpbmctYm90dG9tOiA1Ni4yNSVcIj48aW1nIGFsdD1cImV4YW1wbGVcIiBkYXRhLXNyYy1oZWlnaHQ9XCI3MjBcIiBkYXRhLXNyYy1pZD1cIkZJTEVJRFwiIGRhdGEtc3JjLXdpZHRoPVwiMTI4MFwiIGxvYWRpbmc9XCJsYXp5XCI+PC9kaXY+PC9kaXY+PC9hPjwvZGl2Pic7XG5cbmNvbnN0IHNhbml0aXplZDUgPSBzYW5pdGl6ZSh7XG4gIGZpbGVSZXNvbHZlcjogKGlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyB0aGUgaWQgaXMgZ29pbmcgdG8gYmUgRklMRUlEXG4gICAgcmV0dXJuIHtcbiAgICAgIHNyYzogXCIuL2ltZy9leGFtcGxlLWltZy5qcGVnXCIsXG4gICAgICAvLyBubyBzcmNzZXQgc3BlY2lmaWVkXG4gICAgfTtcbiAgfSxcbn0sIGZlYXR1cmVTdXBwb3J0LCBURVhUX0ZST01fU0VSVkVSXzUpO1xuY29uc3QgdGV4dFRyZWU1ID0gZGVzZXJpYWxpemUoc2FuaXRpemVkNSk7XG5jb25zdCByZW5kZXJlZDUgPSByZW5kZXJUZW1wbGF0ZUR5bmFtaWNhbGx5KHRleHRUcmVlNSwgbmV3IFRlbXBsYXRlQXJncyhcbiAge1xuICAgIGNsaWNrQWN0aW9uOiAoKSA9PiB7XG4gICAgICBhbGVydChcIllvdSBjbGlja2VkIG1lXCIpO1xuICAgIH1cbiAgfVxuKSwge1xuICBvbkN1c3RvbUF0dHJpYnV0ZXNGb3I6IChlbGVtZW50KSA9PiB7XG4gICAgaWYgKChlbGVtZW50IGFzIElQYXJhZ3JhcGgpLnR5cGUgPT09IFwicGFyYWdyYXBoXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIG5vdyBldmVyeSBwYXJhZ3JhcGggd2lsbCBoYXZlIHRoaXNcbiAgICAgICAgb25Nb3VzZU92ZXI6ICgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIk92ZXIgaGVyZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgb25DdXN0b206IChlbGVtZW50LCBwcm9wcywgaW5mbykgPT4ge1xuICAgIGlmICgoZWxlbWVudCBhcyBJSW1hZ2UpLnR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgLy8gaW1hZ2UgaXMgbm93IHdyYXBwZWQgYnkgdGhpcyBibGFjayBib3hcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIgfX0+XG4gICAgICAgICAge2luZm8uZGVmYXVsdFJldHVybigpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm8uZGVmYXVsdFJldHVybigpO1xuICB9LFxuICBvbkN1c3RvbVdyYXA6IChlbGVtZW50LCBlbGVtZW50QXNOb2RlLCBrZXkpID0+IHtcbiAgICAvLyB3ZSBqdXN0IGdvaW5nIHRvIHdyYXAgZXZlcnkgc2luZ2xlIGVsZW1lbnQgd2l0aCB0aGlzXG4gICAgLy8gdGhhdCBpbmNsdWRlcyBqdXN0IHRleHQgbm9kZXNcbiAgICAvLyBhbGwgb2YgaXRcbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gc3R5bGU9e3sgZGlzcGxheTogXCJjb250ZW50c1wiIH19IGtleT17a2V5fT5cbiAgICAgICAge2VsZW1lbnRBc05vZGV9XG4gICAgICA8L3NwYW4+XG4gICAgKVxuICB9XG59KTtcblxuLy8gdGhlcmUgaXMgbW9yZSBvbiB0ZW1wbGF0aW5nIHRoYXQgaXMgbm90IGluY2x1ZGVkIGhlcmUsIGZvciBleGFtcGxlLCBkYXRhLWNvbnRleHQgYW5kIG5vbi1yb290LWluaGVyaXRhYmxlc1xuXG4vLyAoaG93ZXZlciBkb24ndCBmcmV0LCBVSSBIYW5kbGVycyBwcm92aWRlIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgbmV4dCBzZWN0aW9uKVxuLy8gYW5kIGNhbiBiZSB1c2VkIHRvIGRlZmluZSBjdXN0b20gZnVsbHkgZWRpdGFibGUgY29tcG9uZW50c1xuXG5mdW5jdGlvbiBFeGFtcGxlKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+QWR2YW5jZWQgRGlzcGxheWluZzwvaDE+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDQ+XG4gICAgICAgICAgU2hvd2luZyB0ZW1wbGF0aW5nIGNhcGFiaWxpdGllcyB0byBmaWxsIGNvbnRlbnRcbiAgICAgICAgPC9oND5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBPcmlnaW5hbCBIVE1MIChhbHNvIHNhbml0aXplZCk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57VEVYVF9GUk9NX1NFUlZFUl8xfTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBEZXNlcmlhbGl6ZWQgSFRNTCBUcmVlOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e0pTT04uc3RyaW5naWZ5KHRleHRUcmVlMSwgbnVsbCwgMil9PC9jb2RlPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHJlbmRlcmVkIHRlbXBsYXRlXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57cmVuZGVyZWQxfTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICByZW5kZXJlZCB0ZW1wbGF0ZSBkaW5hbWljYWxseSAocmVhY3QgY29tcG9uZW50KVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWNoLXRleHRcIiBzdHlsZT17eyBwYWRkaW5nOiBcIjEwcHhcIiwgYm9yZGVyOiBcInNvbGlkIDFweCAjY2NjXCIgfX0+XG4gICAgICAgICAge3JlbmRlcmVkMV8yfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxoND5cbiAgICAgICAgICBQb3NzaWJpbGl0eSB0byBmaWxsIGdhcHMgb2YgaHRtbCBjb250ZW50IHdpdGggZHluYW1pYyByZWFjdCBjb21wb25lbnRzXG4gICAgICAgIDwvaDQ+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgT3JpZ2luYWwgSFRNTCAoYWxzbyBzYW5pdGl6ZWQpOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e1RFWFRfRlJPTV9TRVJWRVJfMn08L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgcmVuZGVyZWQgdGVtcGxhdGUgZGluYW1pY2FsbHkgKHJlYWN0IGNvbXBvbmVudClcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmljaC10ZXh0XCIgc3R5bGU9e3sgcGFkZGluZzogXCIxMHB4XCIsIGJvcmRlcjogXCJzb2xpZCAxcHggI2NjY1wiIH19PlxuICAgICAgICAgIHtyZW5kZXJlZDJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGg0PlxuICAgICAgICAgIFBvc3NpYmlsaXR5IHRvIHJlbmRlciB0ZW1wbGF0ZXMgdXNpbmcgbG9vcHMsIGFuZCB1c2luZyBtdXRhdGluZyBkYXRhXG4gICAgICAgIDwvaDQ+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgT3JpZ2luYWwgSFRNTCAoYWxzbyBzYW5pdGl6ZWQpOlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNvZGU+e1RFWFRfRlJPTV9TRVJWRVJfM308L2NvZGU+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgcmVuZGVyZWQgdGVtcGxhdGUgZGluYW1pY2FsbHkgKHJlYWN0IGNvbXBvbmVudClcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmljaC10ZXh0XCIgc3R5bGU9e3sgcGFkZGluZzogXCIxMHB4XCIsIGJvcmRlcjogXCJzb2xpZCAxcHggI2NjY1wiIH19PlxuICAgICAgICAgIHtyZW5kZXJlZDN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHJlbmRlcmVkIHRlbXBsYXRlIGRpbmFtaWNhbGx5IChyZWFjdCBjb21wb25lbnQsIHdpdGggbXV0YXRpbmcgZGF0YSlcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmljaC10ZXh0XCIgc3R5bGU9e3sgcGFkZGluZzogXCIxMHB4XCIsIGJvcmRlcjogXCJzb2xpZCAxcHggI2NjY1wiIH19PlxuICAgICAgICAgIHtyZW5kZXJlZDNfMn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDQ+XG4gICAgICAgICAgQXNzaW5nbmluZyBhcmJpdHJhcnkgZnVuY3Rpb25zIGJhc2VkIG9uIGEgY29udGV4dFxuICAgICAgICA8L2g0PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIE9yaWdpbmFsIEhUTUwgKGFsc28gc2FuaXRpemVkKTpcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxjb2RlPntURVhUX0ZST01fU0VSVkVSXzR9PC9jb2RlPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHJlbmRlcmVkIHRlbXBsYXRlIGRpbmFtaWNhbGx5IChyZWFjdCBjb21wb25lbnQpXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpY2gtdGV4dFwiIHN0eWxlPXt7IHBhZGRpbmc6IFwiMTBweFwiLCBib3JkZXI6IFwic29saWQgMXB4ICNjY2NcIiB9fT5cbiAgICAgICAgICB7cmVuZGVyZWQ0fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgPHNlY3Rpb24+XG4gICAgICA8aDQ+XG4gICAgICAgICAgRnVsbCBjdXN0b21pemF0aW9uLCBhbGwgaW1hZ2VzIGdldCBhIGJsYWNrIGJhY2tncm91bmQsIGV2ZXJ5dGhpbmcgaXMgd3JhcHBlZCBpbiBzcGFucywgYW5kIG9uTW91c2VPdmVyXG4gICAgICAgICAgZXZlcnkgcGFyYWdyYXBoIHdpbGwgdHJpZ2dlciBhIGZ1bmN0aW9uIGNhbGwgdG8gbG9nIFwiT3ZlciBoZXJlXCJcbiAgICAgICAgPC9oND5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBPcmlnaW5hbCBIVE1MIChhbHNvIHNhbml0aXplZCk6XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Y29kZT57VEVYVF9GUk9NX1NFUlZFUl81fTwvY29kZT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICByZW5kZXJlZCB0ZW1wbGF0ZSBkaW5hbWljYWxseSAocmVhY3QgY29tcG9uZW50KVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWNoLXRleHRcIiBzdHlsZT17eyBwYWRkaW5nOiBcIjEwcHhcIiwgYm9yZGVyOiBcInNvbGlkIDFweCAjY2NjXCIgfX0+XG4gICAgICAgICAge3JlbmRlcmVkNX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblJlYWN0RE9NLnJlbmRlcig8RXhhbXBsZSAvPiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcHBcIikpOyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1CQUEyQztBQUMzQyx1QkFBcUI7QUFRckIsSUFBTSxpQkFBeUM7QUFBQSxFQUM3QyxxQkFBcUI7QUFBQSxFQUNyQixrQkFBa0I7QUFBQSxF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QU8sRUFBRSxTQUFTLFFBQVEsUUFBUSxpQkFBaUIsS0FDM0UsV0FDSCxDQUNGLEdBRUEsNkJBQUFBLFFBQUEsY0FBQyxpQkFDQyw2QkFBQUEsUUFBQSxjQUFDLFlBQUcsd0VBRUosR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGFBQUksaUNBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sa0JBQW1CLEdBQzFCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSxpREFFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsU0FBSSxXQUFVLGFBQVksT0FBTyxFQUFFLFNBQVMsUUFBUSxRQUFRLGlCQUFpQixLQUMzRSxTQUNILENBQ0YsR0FFQSw2QkFBQUEsUUFBQSxjQUFDLGlCQUNDLDZCQUFBQSxRQUFBLGNBQUMsWUFBRyxzRUFFSixHQUNBLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSxpQ0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxrQkFBbUIsR0FDMUIsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLGlEQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxTQUFJLFdBQVUsYUFBWSxPQUFPLEVBQUUsU0FBUyxRQUFRLFFBQVEsaUJBQWlCLEtBQzNFLFNBQ0gsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGFBQUkscUVBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLFNBQUksV0FBVSxhQUFZLE9BQU8sRUFBRSxTQUFTLFFBQVEsUUFBUSxpQkFBaUIsS0FDM0UsV0FDSCxDQUNGLEdBRUEsNkJBQUFBLFFBQUEsY0FBQyxpQkFDQyw2QkFBQUEsUUFBQSxjQUFDLFlBQUcsbURBRUosR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGFBQUksaUNBRUwsR0FDQSw2QkFBQUEsUUFBQSxjQUFDLGNBQU0sa0JBQW1CLEdBQzFCLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSxpREFFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsU0FBSSxXQUFVLGFBQVksT0FBTyxFQUFFLFNBQVMsUUFBUSxRQUFRLGlCQUFpQixLQUMzRSxTQUNILENBQ0YsR0FFQSw2QkFBQUEsUUFBQSxjQUFDLGlCQUNELDZCQUFBQSxRQUFBLGNBQUMsWUFBRyx3S0FHRixHQUNBLDZCQUFBQSxRQUFBLGNBQUMsYUFBSSxpQ0FFTCxHQUNBLDZCQUFBQSxRQUFBLGNBQUMsY0FBTSxrQkFBbUIsR0FDMUIsNkJBQUFBLFFBQUEsY0FBQyxhQUFJLGlEQUVMLEdBQ0EsNkJBQUFBLFFBQUEsY0FBQyxTQUFJLFdBQVUsYUFBWSxPQUFPLEVBQUUsU0FBUyxRQUFRLFFBQVEsaUJBQWlCLEtBQzNFLFNBQ0gsQ0FDRixDQUNGO0FBRUo7QUFFQSxpQkFBQUMsUUFBUyxPQUFPLDZCQUFBRCxRQUFBLGNBQUMsYUFBUSxHQUFJLFNBQVMsY0FBYyxNQUFNLENBQUM7IiwKICAibmFtZXMiOiBbIlJlYWN0IiwgIlJlYWN0RE9NIl0KfQo=
