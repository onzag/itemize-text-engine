import {
  DOMWindow,
  NULL_DOCUMENT,
  SERIALIZATION_REGISTRY,
  __toESM,
  require_react
} from "/dist/commons-EJSJQMMI.js";

// ../renderer/index.tsx
var import_react = __toESM(require_react());
function processTemplateNodeInitialization(node, templateArgsContext, templateArgsRootcontext) {
  const ifKey = node.dataset.if;
  if (ifKey) {
    const ifValue = templateArgsContext[ifKey];
    if (!ifValue) {
      node.parentElement.removeChild(node);
      return;
    }
  }
  const textKey = node.dataset.text;
  if (textKey) {
    const text = templateArgsContext[textKey] || templateArgsRootcontext[textKey];
    if (typeof text !== "string") {
    } else {
      node.textContent = text;
    }
  }
  const threfKey = node.dataset.href;
  if (threfKey) {
    const thref = templateArgsContext[threfKey] || templateArgsRootcontext[threfKey];
    if (typeof thref !== "string") {
    } else {
      node.setAttribute("href", thref);
    }
  }
  const htmlKey = node.dataset.html;
  if (htmlKey) {
    const html = templateArgsContext[htmlKey] || templateArgsRootcontext[htmlKey];
    if (typeof html !== "string") {
    } else {
      node.innerHTML = html;
    }
  }
}
function processTemplateInitialization(node, templateArgsContext, templateArgsRootContext) {
  node.hasChildNodes() && node.childNodes.forEach((childNode) => {
    const childNodeASHTMLElement = childNode;
    let templateArgsNewContext = templateArgsContext;
    if (typeof childNodeASHTMLElement.dataset !== "undefined" && childNodeASHTMLElement.dataset) {
      const contextKey = childNodeASHTMLElement.dataset.context;
      if (contextKey) {
        templateArgsNewContext = templateArgsNewContext[contextKey];
      }
      const forEachKey = childNodeASHTMLElement.dataset.forEach;
      if (forEachKey) {
        const ifKey = childNodeASHTMLElement.dataset.if;
        const ifValue = ifKey && templateArgsNewContext[ifKey];
        if (ifKey && !ifValue) {
          node.parentElement.removeChild(node);
        } else {
          const forArgument = templateArgsNewContext[forEachKey];
          const nextSibling = childNodeASHTMLElement.nextSibling;
          forArgument.forEach((forEachContext, index) => {
            const clone = childNodeASHTMLElement.cloneNode(true);
            if (nextSibling) {
              childNodeASHTMLElement.parentElement.insertBefore(clone, nextSibling);
            } else {
              childNodeASHTMLElement.parentElement.appendChild(clone);
            }
            processTemplateNodeInitialization(
              clone,
              forEachContext,
              templateArgsRootContext
            );
            if (clone.hasChildNodes()) {
              processTemplateInitialization(
                clone,
                forEachContext,
                templateArgsRootContext
              );
            }
          });
          childNodeASHTMLElement.parentElement.removeChild(childNodeASHTMLElement);
        }
      } else {
        processTemplateNodeInitialization(
          childNodeASHTMLElement,
          templateArgsNewContext,
          templateArgsRootContext
        );
      }
    }
    if (childNodeASHTMLElement.hasChildNodes()) {
      processTemplateInitialization(
        childNodeASHTMLElement,
        templateArgsNewContext,
        templateArgsRootContext
      );
    }
  });
}
function renderTemplateAsNode(template, args) {
  const cheapdiv = DOMWindow.document.createElement("div");
  cheapdiv.innerHTML = template;
  processTemplateInitialization(
    cheapdiv,
    args,
    args
  );
  return cheapdiv;
}
function renderTemplateDontSanitize(template, args) {
  return renderTemplateAsNode(template, args).innerHTML;
}
function renderTemplateDynamically(document, args, options = {}) {
  if (document === NULL_DOCUMENT) {
    return null;
  }
  const toReturn = /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, document.children.map((c, index) => {
    return SERIALIZATION_REGISTRY.REACTIFY[c.type || "text"]({
      asTemplate: true,
      active: true,
      element: c,
      key: index,
      templateArgs: args,
      selected: false,
      extraOptions: options,
      parent: document,
      tree: document
    });
  }));
  if (args && args.wrapper) {
    return args.wrapper(toReturn);
  }
  return toReturn;
}

export {
  renderTemplateDontSanitize,
  renderTemplateDynamically
};
//# sourceMappingURL=data:application/json;base64,
